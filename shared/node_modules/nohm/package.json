{
  "name": "nohm",
  "version": "0.9.3",
  "engines": {
    "node": ">=0.6"
  },
  "author": {
    "name": "Moritz Peters"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/maritz/nohm.git"
  },
  "bugs": {
    "url": "https://github.com/maritz/nohm/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "description": "redis ORM (Object relational mapper)",
  "main": "./lib/nohm",
  "dependencies": {
    "async": "0.1.22",
    "redis": ">=0.7.2",
    "traverse": "0.6.3"
  },
  "devDependencies": {
    "nodeunit": "0.6.4"
  },
  "contributors": [
    {
      "name": "Pier Paolo Ramon",
      "url": "https://github.com/yuchi"
    }
  ],
  "readme": "# Nohm\n\n## Description\n\nNohm is an object relational mapper (ORM) written for node.js and redis.\n\n## Requirements\n\n* redis >= 2.4\n\n## Install\n\n### Installing nohm\n\n    npm install nohm\n\n## Documentation\nhttp://maritz.github.com/nohm/\n\n## Examples\n\n~~~~ javascript\n  var nohm = require('nohm').Nohm;\n  var redis = require('redis').createClient();\n  \n  nohm.setClient(redis);\n\n  nohm.model('User', {\n    properties: {\n      name: {\n        type: 'string',\n        unique: true,\n        validations: [\n          'notEmpty'\n        ]\n      },\n      email: {\n        type: 'string',\n        unique: true,\n        validations: [\n          'email'\n        ]\n      },\n      country: {\n        type: 'string',\n        defaultValue: 'Tibet',\n        validations: [\n          'notEmpty'\n        ]\n      },\n      visits: {\n        type: function incrVisitsBy(value, key, old) {\n          return old + value;\n        },\n        defaultValue: 0,\n        index: true\n      }\n    },\n    methods: {\n      getContryFlag: function () {\n        return 'http://example.com/flag_'+this.p('country')+'.png';\n      },\n    }\n  });\n\n  var user = nohm.factory('User');\n  user.p({\n    name: 'Mark',\n    email: 'mark@example.com',\n    country: 'Mexico',\n    visits: 1\n  });\n  user.save(function (err) {\n    if (err === 'invalid') {\n      console.log('properties were invalid: ', user.errors);\n    } else if (err) {\n      console.log(err); // database or unknown error\n    } else {\n      console.log('saved user! :-)');\n      user.remove(function (err) {\n        if (err) {\n          console.log(err); // database or unknown error\n        } else {\n          console.log('successfully removed user');\n        }\n      });\n    }\n  });\n\n  // try to load a user from the db\n  var otherUser = nohm.factory('User', 522, function (err) {\n    if (err === 'not found') {\n      console.log('no user with id 522 found :-(');\n    } else if (err) {\n      console.log(err); // database or unknown error\n    } else {\n      console.log(otherUser.allProperties());\n    }\n  });\n~~~~\n\n\n* [nohm/examples/rest-user-server](https://github.com/maritz/nohm/tree/master/examples/rest-user-server) (needs express)\n* [Beauvoir](https://github.com/yuchi/Beauvoir) Simple project management app - by yuchi\n\nDo you have code that should/could be listed here? Message me!\n\n## Contribute?\n\nYes, please contact me or just fork and request pulls. Any help or feedback is appreciated. If you use nohm I'd also be happy if you just drop me a quick msg about it.\n\n## Running tests\nTo run the tests you need to have nodeunit v0.6.4. This will be installed if you installed nohm with the --dev argument.\nOtherwise you can run:\n\n    npm install nodeunit@0.6.4\n\nThen run\n\n    node test/tests.js\n\n*Careful*: This requires a running redis server. (you can configure host/port with the command line arguments --redis-host 1.1.1.1 --redis-port 1234)  \nThe tests also create a lot of keys in your database that look something like this: \n\n    nohmtests:something:something\n\nAfter the tests have run all keys that match the pattern nohmtests:* are deleted!\nYou can prevent this by passing --no-cleanup (which will leave hundreds or thousands of test keys in your database).\nYou may also change the prefix (\"nohmtests\") part doing something like\n\n    node test/tests.js --nohm-prefix YourNewPrefix\n\nNow the keys will look like this:\n\n    YourNewPrefix:something:something\n",
  "readmeFilename": "README.md",
  "_id": "nohm@0.9.3",
  "_from": "nohm@"
}
