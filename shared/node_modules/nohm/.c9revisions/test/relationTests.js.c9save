{"ts":1354637661310,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var nohm = require(__dirname+'/../lib/nohm').Nohm;\nvar args = require(__dirname+'/testArgs.js');\nvar async = require('async');\nvar redis = args.redis;\nvar h = require(__dirname+'/helper.js');\nvar relationsprefix = nohm.prefix.relations;\nvar UserLinkMockup = nohm.model('UserLinkMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      validations: [\n        'notEmpty'\n      ]\n    }\n  },\n  idGenerator: 'increment'\n});\nvar CommentLinkMockup = nohm.model('CommentLinkMockup', {\n  properties: {\n    text: {\n      type: 'string',\n      defaultValue: 'this is a comment! REALLY!',\n      validations: [\n        'notEmpty'\n      ]\n    }\n  }\n});\nvar RoleLinkMockup = nohm.model('RoleLinkMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'user'\n    }\n  },\n  idGenerator: 'increment'\n});\n\n\nexports.relation = {\n  \n  setUp: function (next) {\n    if ( ! nohm.client) {\n      nohm.setClient(redis);\n    }\n    next();\n  },\n  tearDown: function (next) {\n    h.cleanUp(redis, args.prefix, next);\n  },\n  \n  \n  instances: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2;\n\n    t.expect(2);\n\n    role.link(user);\n\n    t.ok(role.relationChanges !== user.relationChanges, 'Instances share the relationchanges, initiate them as an empty array in the constructor.');\n\n    role2 = new RoleLinkMockup();\n    t.same(role2.relationChanges, [], 'Creating a new instance does not reset the relationchanges of that instance.');\n\n    t.done();\n  },\n  \n  \n  link: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup(),\n    linkCallbackCalled = false,\n    linkCallbackCalled2 = false;\n    t.expect(9);\n  \n    user.link(role, function (action, on, name, obj) {\n      linkCallbackCalled = true;\n      t.equals(action, 'link', 'The argument \"action\" given to the link callback are not correct');\n      t.equals(on, 'UserLinkMockup', 'The argument \"on\" given to the link callback are not correct');\n      t.equals(name, 'default', 'The argument \"name\" given to the link callback are not correct');\n      t.same(obj, role, 'The argument \"obj\" given to the link callback are not correct');\n    });\n  \n    role2.p('name', 'test');\n  \n    user.link(role2, function () {\n      linkCallbackCalled2 = true;\n    });\n  \n    user.save(function (err) {\n      if (!err) {\n        t.ok(linkCallbackCalled, 'The provided callback for linking was not called.');\n        t.ok(linkCallbackCalled2, 'The provided callback for the second(!) linking was not called.');\n        redis.keys(relationsprefix + '*', function (err, values) {\n          var args = [],\n          key,\n          firstDone = false,\n          keyCheck = function (err, members) {\n            t.equals(members[0], '1', 'The set of a relationship contained a wrong member');\n            if (firstDone === true) {\n              t.done();\n            } else {\n              firstDone = true;\n            }\n          };\n          if (!err) {\n            t.ok(values.length === 3, 'Linking an object did not create the correct number of keys.');\n            redis.smembers(values[0].toString(), keyCheck);\n            redis.smembers(values[1].toString(), keyCheck);\n          } else {\n            console.dir(err);\n            t.done();\n          }\n        });\n      } else {\n        console.dir(err);\n        t.done();\n      }\n    });\n  },\n  \n  unlink: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup(),\n    unlinkCallbackCalled = false,\n    unlinkCallbackCalled2 = false;\n    t.expect(7);\n  \n    user.id = 1;\n    role.id = 1;\n    role2.id = 2;\n  \n    user.unlink(role, function (action, on, name, obj) {\n      unlinkCallbackCalled = true;\n      t.equals(action, 'unlink', 'The argument \"action\" given to the unlink callback are not correct');\n      t.equals(on, 'UserLinkMockup', 'The argument \"on\" given to the unlink callback are not correct');\n      t.equals(name, 'default', 'The argument \"name\" given to the unlink callback are not correct');\n      t.equals(obj, role, 'The argument \"obj\" given to the unlink callback are not correct');\n    });\n  \n    user.unlink(role2, function (action, on) {\n      unlinkCallbackCalled2 = true;\n    });\n  \n    user.save(function (err) {\n      if (!err) {\n        t.ok(unlinkCallbackCalled, 'The provided callback for unlinking was not called.');\n        t.ok(unlinkCallbackCalled2, 'The provided callback for the second(!) unlinking was not called.');\n        redis.keys(relationsprefix + '*', function (err, value) {\n          if (!err) {\n            var check = (Array.isArray(value) && value.length === 0) || value === null;\n            t.ok(check, 'Unlinking an object did not delete keys.');\n          }\n          t.done();\n        });\n      } else {\n        console.dir(err);\n        console.dir(user.errors);\n        t.done();\n      }\n    });\n  },\n  \n  deeplink: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    comment = new CommentLinkMockup(),\n    userLinkCallbackCalled = false,\n    commentLinkCallbackCalled = false;\n    t.expect(5);\n  \n    role.link(user, function () {\n      userLinkCallbackCalled = true;\n    });\n    user.link(comment, function () {\n      commentLinkCallbackCalled = true;\n    });\n  \n    role.save(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      t.ok(userLinkCallbackCalled, 'The user link callback was not called.');\n      t.ok(commentLinkCallbackCalled, 'The comment link callback was not called.');\n      t.ok(user.id !== null, 'The deeplinked user does not have an id and thus is probably not saved correctly.');\n      t.ok(comment.id !== null, 'The deeplinked comment does not have an id and thus is probably not saved correctly.');\n      redis.smembers(relationsprefix + comment.modelName + ':defaultForeign:' +\n                      user.modelName + ':' + comment.id,\n                      function (err, value) {\n                        if (!err) {\n                          t.equals(value, user.id, 'The user does not have the neccessary relations saved. There are probably more problems, if this occurs.');\n                        } else {\n                          console.dir(err);\n                        }\n                        t.done();\n                      });\n    });\n  },\n  \n  removeUnlinks: function (t) {\n    // uses unlinkAll in remove\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup(),\n    comment = new CommentLinkMockup(),\n    linkName = 'creator';\n    t.expect(8);\n    \n    user.p('name', 'removeUnlinks');\n    \n    role.link(user, linkName);\n    user.link(role, 'isA');\n    user.link(comment);\n    role2.link(user);\n    \n    role2.save(function (err) {\n      t.ok(!err, 'there was an unexpected error while saving.');\n      var tmpid = user.id;\n      user.remove(function (err) {\n        t.ok(!err, 'An unexpected redis error occured.');\n        async.parallel([\n          function (next) {\n            redis.exists(relationsprefix+user.modelName+':'+linkName+'Foreign:'+role.modelName+':'+tmpid, \n              function (err, value) {\n                t.equals(value, 0, 'The foreign link to the custom-link-name role was not deleted');\n                next(err);\n            });\n          },\n          function (next) {\n            redis.exists(relationsprefix+role.modelName+':'+linkName+':'+user.modelName+':'+role.id, \n              function (err, value) {\n                t.equals(value, 0, 'The link to the custom-link-name role was not deleted');\n                next(err);\n            });\n          },\n          function (next) {\n            redis.exists(relationsprefix+user.modelName+':default:'+comment.modelName+':'+tmpid, \n              function (err, value) {\n                t.equals(value, 0, 'The link to the child comment was not deleted');\n                next(err);\n            });\n          },\n          function (next) {\n            redis.sismember(relationsprefix+comment.modelName+':defaultForeign:'+user.modelName+':'+comment.id, tmpid,\n              function (err, value) {\n                t.equals(value, 0, 'The link to the comment parent was not deleted');\n                next(err);\n            });\n          },\n          function (next) {\n            redis.sismember(relationsprefix+role2.modelName+':default:'+user.modelName+':'+role2.id, tmpid,\n              function (err, value) {\n                t.equals(value, 0, 'The removal did not delete the link from a parent to the object itself.');\n                next(err);\n              }\n            );\n          }],\n          function (err) {\n            t.ok(!err, 'An unexpected redis error occured.');\n            t.done();\n          }\n        );\n      });\n    });\n  },\n  \n  belongsTo: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup();\n    t.expect(1);\n  \n    user.link(role);\n  \n    user.save(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      user.belongsTo(role, function (err, value) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.equals(value, true, 'The link was not detected correctly by belongsTo()');\n        t.done();\n      });\n    });\n  },\n  \n  getAll: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup();\n    t.expect(4);\n  \n    user.link(role);\n    user.link(role2);\n  \n    user.save(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      var should = [role.id, role2.id];\n      user.getAll(role.modelName, function (err, values) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.ok(Array.isArray(values), 'getAll() did not return an array.');\n        for (var index, i = 0, len = values.length; i < len; i = i + 1) {\n          index = should.indexOf(values[i]);\n          t.ok(index !== -1, 'getAll() returned an array with wrong values');\n          delete should[index];\n          delete values[i];\n        }\n        t.same(values, should, 'getAll() did not return the correct array');\n        t.done();\n      });\n    });\n  },\n  \n  numLinks: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup();\n    t.expect(1);\n  \n    user.link(role);\n    user.link(role2);\n  \n    user.save(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      user.numLinks(role.modelName, function (err, value) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.same(value, 2, 'The number of links was not returned correctly');\n        t.done();\n      });\n    });\n  },\n  \n  \n  deeplinkError: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    comment = new CommentLinkMockup();\n    t.expect(5);\n  \n    role.link(user);\n    user.link(comment);\n    comment.p('text', ''); // makes the comment fail\n  \n    role.save(function (err, childFail, childName) {\n      t.ok(user.id !== null, 'The deeplinked user does not have an id and thus is probably not saved correctly.');\n      t.same(comment.id, null, 'The deeplinked erroneous comment does not have an id and thus is probably saved.');\n      t.same(err, 'invalid', 'The deeplinked role did not fail.');\n      t.same(childFail, true, 'The deeplinked role did not fail in a child or reported it wrong.');\n      t.same(childName, 'CommentLinkMockup', 'The deeplinked role failed in the wrong model or reported it wrong.');\n      t.done();\n    });\n  },\n  \n  linkToSelf: function (t) {\n    var user = new UserLinkMockup();\n    t.expect(1);\n  \n    user.link(user);\n  \n    user.save(function (err) {\n      t.ok(!err, 'Linking an object to itself failed.');\n      t.done();\n    });\n  },\n  \n  deppLinkErrorCallback: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    comment = new CommentLinkMockup();\n    t.expect(8);\n  \n    role.link(user, {\n      error: function (err, errors, obj) {\n        console.log(err, errors, obj.allProperties())\n        t.ok(false, 'Error callback for role.link(user) called even though user is valid.');\n      }\n    });\n    user.link(comment, {\n      error: function (err, errors, obj) {\n        t.same(err, 'invalid', 'err in error callback was not \"invalid\"');\n        t.same(errors, comment.errors, 'errors in error callback was not comment.errors');\n        t.same(comment, obj, 'obj in Error callback was not the right object.');\n      }\n    });\n    comment.p('text', ''); // makes the comment fail\n  \n    role.save(function (err, childFail, childName) {\n      t.ok(user.id !== null, 'The deeplinked user does not have an id and thus is probably not saved correctly.');\n      t.same(comment.id, null, 'The deeplinked erroneous comment does not have an id and thus is probably saved.');\n      t.same(err, 'invalid', 'The deeplinked role did not fail.');\n      t.same(childFail, true, 'The deeplinked role did not fail in a child or reported it wrong.');\n      t.same(childName, 'CommentLinkMockup', 'The deeplinked role failed in the wrong model or reported it wrong.');\n      t.done();\n    });\n  },\n  \n  contineOnError: function (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    comment = new CommentLinkMockup(),\n    comment2 = new CommentLinkMockup(),\n    comment3 = new CommentLinkMockup();\n    t.expect(5);\n  \n    role.link(user, {\n      error: function (err, errors, obj) {\n        console.log(err, errors, obj.allProperties())\n        t.ok(false, 'Error callback for role.link(user) called even though user is valid.');\n      }\n    });\n    user.link(comment, {\n      error: function (err, errors, obj) {\n        t.same(err, 'invalid', 'err in error callback was not \"invalid\"');\n        t.same(errors, comment.errors, 'errors in error callback was not comment.errors');\n        t.same(comment, obj, 'obj in Error callback was not the right object.');\n      }\n    });\n    user.link(comment2, {\n      error: function (err, errors, obj) {\n        console.log(err, errors, obj.allProperties())\n        t.ok(false, 'Error callback for comment2.link(user) called even though user is valid.');\n      }\n    });\n    user.link(comment3, {\n      error: function (err, errors, obj) {\n        console.log(err, errors, obj.allProperties())\n        t.ok(false, 'Error callback for comment3.link(user) called even though user is valid.');\n      }\n    });\n    comment.p('text', ''); // makes the first comment fail\n  \n    role.save({continue_on_link_error: true}, function () {\n      redis.sismember(relationsprefix+comment3.modelName+':defaultForeign:'+user.modelName+':'+comment3.id, user.id,\n        function (err, value) {\n          t.ok(!err, 'There was a redis error');\n          t.same(value, \"1\", 'The comment3 relation was not saved');\n          t.done();\n        }\n      );\n    });\n  }\n};\n \n/* Maybe this isn't such a good idea. I like that model definitions are completely\n   lacking relation definitions.\ncascadingDeletes: function (t) {\n  var user = new UserLinkMockup(),\n  role = new RoleLinkMockup(),\n  comment = new CommentLinkMockup(),\n  testComment = new CommentLinkMockup();\n  t.expect(1);\n\n  user.link(role);\n  role.link(comment);\n\n  user.save(function (err) {\n    if (err) {\n      console.dir(err);\n      t.done();\n    }\n    var testid = comment.id;\n    user.remove(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      testComment.load(testid, function (err) {\n        t.equals(err, 'not found', 'Removing an object that has cascading deletes did not remove the relations');\n        t.done();\n      });\n    });\n  });\n};*/"]],"start1":0,"start2":0,"length1":0,"length2":15824}]],"length":15824}
{"contributors":[],"silentsave":true,"ts":1354637998832,"patch":[[{"diffs":[[0,"  },\n  \n"],[1,"  getAll\n  \n"],[0,"  numLin"]],"start1":10285,"start2":10285,"length1":16,"length2":28}]],"length":15836,"saved":false}
{"ts":1354638001659,"patch":[[{"diffs":[[0,"  getAll"],[1,"Differing"],[0,"\n  \n  nu"]],"start1":10293,"start2":10293,"length1":16,"length2":25}]],"length":15845,"saved":false}
{"ts":1354638002956,"patch":[[{"diffs":[[0,"iffering"],[1,"I"],[0,"\n  \n  nu"]],"start1":10302,"start2":10302,"length1":16,"length2":17}]],"length":15846,"saved":false}
{"ts":1354638006094,"patch":[[{"diffs":[[0,"fferingI"],[1,"DGenerators"],[0,"\n  \n  nu"]],"start1":10303,"start2":10303,"length1":16,"length2":27}]],"length":15857,"saved":false}
{"ts":1354638008683,"patch":[[{"diffs":[[0," \n  "],[-1,"getAllDifferingIDGenerators"],[1,"''"],[0,"\n  \n"]],"start1":10291,"start2":10291,"length1":35,"length2":10}]],"length":15832,"saved":false}
{"ts":1354638011228,"patch":[[{"diffs":[[0,",\n  \n  '"],[1,"getALl "],[0,"'\n  \n  n"]],"start1":10288,"start2":10288,"length1":16,"length2":23}]],"length":15839,"saved":false}
{"ts":1354638013162,"patch":[[{"diffs":[[0,"getA"],[-1,"Ll "],[0,"'\n  "]],"start1":10296,"start2":10296,"length1":11,"length2":8}]],"length":15836,"saved":false}
{"ts":1354638015146,"patch":[[{"diffs":[[0,"\n  'getA"],[1,"ll with "],[0,"'\n  \n  n"]],"start1":10292,"start2":10292,"length1":16,"length2":24}]],"length":15844,"saved":false}
{"ts":1354638017091,"patch":[[{"diffs":[[0,"All with"],[-1," "],[0,"'\n  \n  n"]],"start1":10299,"start2":10299,"length1":17,"length2":16}]],"length":15843,"saved":false}
{"ts":1354638017704,"patch":[[{"diffs":[[0,"All with"],[1," "],[0,"'\n  \n  n"]],"start1":10299,"start2":10299,"length1":16,"length2":17}]],"length":15844,"saved":false}
{"ts":1354638021775,"patch":[[{"diffs":[[0,"ll with "],[1,"different id generators"],[0,"'\n  \n  n"]],"start1":10300,"start2":10300,"length1":16,"length2":39}]],"length":15867,"saved":false}
{"ts":1354638023781,"patch":[[{"diffs":[[0,"erators'"],[1,": functio"],[0,"\n  \n  nu"]],"start1":10324,"start2":10324,"length1":16,"length2":25}]],"length":15876,"saved":false}
{"ts":1354638027625,"patch":[[{"diffs":[[0," functio"],[1,"n (t) {\n    var user = new UserLinkMockup(),\n    role = new RoleLinkMockup(),\n    role2 = new RoleLinkMockup();\n    t.expect(4);\n  \n    user.link(role);\n    user.link(role2);\n  \n    user.save(function (err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      var should = [role.id, role2.id];\n      user.getAll(role.modelName, function (err, values) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.ok(Array.isArray(values), 'getAll() did not return an array.');\n        for (var index, i = 0, len = values.length; i < len; i = i + 1) {\n          index = should.indexOf(values[i]);\n          t.ok(index !== -1, 'getAll() returned an array with wrong values');\n          delete should[index];\n          delete values[i];\n        }\n        t.same(values, should, 'getAll() did not return the correct array');\n        t.done();\n      });\n    });\n  },"],[0,"\n  \n  nu"]],"start1":10333,"start2":10333,"length1":16,"length2":928}]],"length":16788,"saved":false}
{"ts":1354638032815,"patch":[[{"diffs":[[0,"\n    role = new "],[-1,"Role"],[1,"Comment"],[0,"LinkMockup(),\n  "]],"start1":10385,"start2":10385,"length1":36,"length2":39}]],"length":16791,"saved":false}
{"ts":1354638068050,"patch":[[{"diffs":[[0,"ckup(),\n    "],[-1,"role"],[1,"comment"],[0," = new Comme"]],"start1":10378,"start2":10378,"length1":28,"length2":31},{"diffs":[[0,"up()"],[-1,",\n    role2 = new RoleLinkMockup()"],[0,";\n  "]],"start1":10419,"start2":10419,"length1":42,"length2":8},{"diffs":[[0,");\n    t.expect("],[-1,"4"],[1,"2"],[0,");\n  \n    user.l"]],"start1":10422,"start2":10422,"length1":33,"length2":33},{"diffs":[[0,"ink("],[-1,"role);\n    user.link(role2"],[1,"comment"],[0,");\n "]],"start1":10455,"start2":10455,"length1":34,"length2":15},{"diffs":[[0,"r should = ["],[-1,"role.id, role2"],[1,"comment"],[0,".id];\n      "]],"start1":10580,"start2":10580,"length1":38,"length2":31},{"diffs":[[0,"    user.getAll("],[-1,"role"],[1,"comment"],[0,".modelName, func"]],"start1":10607,"start2":10607,"length1":36,"length2":39},{"diffs":[[0,"  }\n"],[-1,"        t.ok(Array.isArray(values), 'getAll() did not return an array.');\n        for (var index, i = 0, len = values.length; i < len; i = i + 1) {\n          index = should.indexOf(values[i]);\n          t.ok(index !== -1, 'getAll() returned an array with wrong values');\n          delete should[index];\n          delete values[i];\n        }\n"],[0,"    "]],"start1":10740,"start2":10740,"length1":349,"length2":8}]],"length":16396,"saved":false}
{"ts":1354638088806,"patch":[[{"diffs":[[0,".expect("],[-1,"2"],[1,"1"],[0,");\n  \n  "]],"start1":10430,"start2":10430,"length1":17,"length2":17}]],"length":16396,"saved":false}
