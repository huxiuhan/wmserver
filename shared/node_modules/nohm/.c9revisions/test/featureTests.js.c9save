{"ts":1342145878410,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var util = require('util');\nvar args = require(__dirname+'/testArgs.js');\nvar h = require('./helper.js');\n\nexports.checkModules = function (t) {\n  var redis, nohm, async;\n  t.expect(3);\n\n  redis = require('redis');\n  t.ok(typeof redis.createClient === 'function', 'the redis client library should be available.');\n\n  nohm = require(__dirname+'/../lib/nohm');\n  t.ok(typeof nohm.Nohm === 'function', 'nohm should be available -- something is fishy here.');\n\n  async = require('async');\n  t.ok(typeof async !== 'undefined', 'async should be available.');\n\n  t.done();\n};\n\nvar prefix = args.prefix;\n\n// real tests start in 3.. 2.. 1.. NOW!\nvar redis = args.redis;\nvar nohm = require(__dirname+'/../lib/nohm').Nohm;\nvar helper = require(__dirname+'/../lib/helpers');\nvar async = require('async');\n\nvar UserMockup = nohm.model('UserMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'test',\n          unique: true,\n          validations: [\n            'notEmpty'\n          ]\n        },\n        visits: {\n          type: 'integer',\n          index: true\n        },\n        email: {\n          type: 'string',\n          unique: true,\n          defaultValue: 'email@email.de',\n          validations: [\n            'email'\n          ]\n        },\n        emailOptional: {\n          type: 'string',\n          unique: true,\n          defaultValue: '',\n          validations: [\n            ['email', {\n              optional: true\n            }]\n          ]\n        },\n        country: {\n          type: 'string',\n          defaultValue: 'Tibet',\n          index: true,\n          validations: [\n            'notEmpty'\n          ]\n        },\n        json: {\n          type: 'json',\n          defaultValue: '{}'\n        }\n      },\n      methods: {\n        test: function test () {\n          return this.p('name');\n        },\n        prop: function prop (name) {\n          if (name === 'super')\n            return this._super_prop('name');\n          else \n            return this._super_prop.apply(this, arguments, 0);\n        }\n      },\n      idGenerator: 'increment'\n    });\n    \nnohm.model('NonIncrement', {\n  properties: {\n    name: 'No name'\n  }\n});\n\nnohm.model('UniqueInteger', {\n  properties: {\n    unique: {\n      type: 'integer',\n      unique: true\n    }\n  }\n});\n    \n    \nexports.prepare = {\n  redisClean: function(t) {\n    t.expect(1);\n    redis.keys(prefix + ':*:*Mockup:*', function(err, value) {\n      var check = (Array.isArray(value) && value.length === 0) || value === null;\n      t.ok(check, 'The redis database seems to contain fragments from previous nohm testruns. Use the redis command \"KEYS ' + prefix + ':*:*Mockup:*\" to see what keys could be the cause.');\n      t.done();\n    });\n  },\n\n  idIntersection: function(t) {\n    var arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        arr2 = [2, 3, 4, 10],\n        arr3 = [2, 3, 4, 10],\n        arr4 = [],\n        arr5 = [16, 28, 39],\n        arr6 = ['hurgelwurz', 28, 39],\n        arr7 = ['hurgelwurz', 28, 39],\n        arr8 = [10, 3, 2],\n        testIntersection = function(arrs, resultTest) {\n        var result;\n\n        result = helper.idIntersection.apply(null, arrs);\n        t.same(result, resultTest, 'idIntersection did not perform correctly.');\n        };\n    t.expect(9);\n\n    testIntersection([arr1], arr1);\n\n    testIntersection([arr1, arr2], [2, 3, 4]);\n\n    testIntersection([arr1, arr2, arr3], [2, 3, 4]);\n\n    testIntersection([arr2, arr3], [2, 3, 4, 10]);\n\n    testIntersection([arr1, arr2, arr3, arr4], []);\n\n    testIntersection([arr1, arr2, arr3, arr5], []);\n\n    testIntersection([arr5, arr6], [28, 39]);\n\n    testIntersection([arr6, arr7], ['hurgelwurz', 28, 39]);\n\n    testIntersection([arr3, arr8], [10, 3, 2]);\n\n    t.done();\n  },\n\n  setRedisClient: function(t) {\n    t.expect(2);\n    console.log('Note: there should be an error message in the next line. (intended behaviour)');\n    nohm.client = null;\n    var user = new UserMockup();\n    t.same(user, {}, 'Creating a model without having a nohm client set did not return false.');\n    \n    console.log('Note: there should be an error message in the next line. (intended behaviour)');\n    nohm.setClient(require('redis').createClient(80, '123.123.123.123')); // this should not connect.\n\n    nohm.setClient(redis);\n    user = new UserMockup();\n    t.equals(typeof(user.modelName), 'string', 'Creating a model having a nohm client set did not work.');\n    t.done();\n  },\n\n  setPrefix: function(t) {\n    var oldPrefix = nohm.prefix;\n    t.expect(1);\n    nohm.setPrefix('hurgel');\n    t.same(nohm.prefix, helper.getPrefix('hurgel'), 'Setting a custom prefix did not work as expected');\n    nohm.prefix = oldPrefix;\n    t.done();\n  }\n};\n\nexports.propertyTests = {\n  propertyGetter: function(t) {\n    var user = new UserMockup();\n    t.expect(7);\n\n    t.equals(typeof(user.p), 'function', 'Property getter short p is not available.');\n\n    t.equals(typeof(user.prop), 'function', 'Property getter short prop is not available.');\n\n    t.equals(typeof(user.property), 'function', 'Property getter is not available.');\n\n    t.equals(user.p('email'), 'email@email.de', 'Property getter did not return the correct value for email.');\n\n    t.equals(user.p('name'), 'test', 'Property getter did not return the correct value for name.');\n\n    console.log('Note: there should be an error message in the next line. (intended behaviour)');\n    t.ok(!user.p('hurgelwurz'), 'Accessing an undefined property did not return false');\n\n    t.same(user.p('json'), {}, 'Property getter did not return the correct value for json.');\n\n    t.done();\n  },\n\n\n  propertySetter: function(t) {\n    var user = new UserMockup();\n    var controlUser = new UserMockup();\n    t.expect(6);\n\n    t.same(user.p('email', 123), '', 'Setting a property did not return the new value that was set (with casting).');\n\n    user.p('email', 'asdasd');\n    t.equals(user.p('email'), 'asdasd', 'Setting a property did not actually set the property to the correct value');\n\n    user.p('email', 'test@test.de');\n    t.ok(user.p('email') !== controlUser.p('email'), 'Creating a new instance of an Object does not create fresh properties.');\n\n    user.p({\n      name: 'objectTest',\n      email: 'object@test.de'\n    });\n\n    t.equals(user.p('name'), 'objectTest', 'Setting multiple properties by providing one object did not work correctly for the name.');\n    t.equals(user.p('email'), 'object@test.de', 'Setting multiple properties by providing one object did not work correctly for the email.');\n\n    user.p('json', {\n      test: 1\n    });\n\n    t.equals(user.p('json').test, 1, 'Setting a json property did not work correctly.');\n\n    t.done();\n  },\n\n\n  propertyDiff: function(t) {\n    var user = new UserMockup(),\n        should = [],\n        beforeName = user.p('name'),\n        beforeEmail = user.p('email');\n    t.expect(5);\n\n    t.ok(user.propertyDiff(), 'Property diff returned changes even though there were none');\n\n    user.p('name', 'hurgelwurz');\n    should.push({\n      key: 'name',\n      before: beforeName,\n      after: 'hurgelwurz'\n    });\n    t.same(should, user.propertyDiff(), 'Property diff did not correctly recognize the changed property `name`.');\n\n    user.p('email', 'asdasd');\n    t.same(should, user.propertyDiff('name'), 'Property diff did not correctly search for changes only in `name`.');\n\n    should.push({\n      key: 'email',\n      before: beforeEmail,\n      after: 'asdasd'\n    });\n    t.same(should, user.propertyDiff(), 'Property diff did not correctly recognize the changed properties `name` and `email`.');\n\n    should.shift();\n    user.p('name', beforeName);\n    t.same(should, user.propertyDiff(), 'Property diff did not correctly recognize the reset property `name`.');\n\n    t.done();\n  },\n\n\n  propertyReset: function(t) {\n    var user = new UserMockup(),\n        beforeName = user.p('name'),\n        beforeEmail = user.p('email');\n    t.expect(4);\n\n    user.p('name', user.p('name') + 'hurgelwurz');\n    user.p('email', user.p('email') + 'asdasd');\n    t.ok(user.propertyReset('name'), 'Property reset did not return true.'); // uhm... needed? i don't know\n    t.ok(user.p('name') === beforeName, 'Property reset did not properly reset `name`.');\n\n    t.ok(user.p('email') !== beforeEmail, 'Property reset reset `email` when it shouldn\\'t have.');\n\n    user.p('name', user.p('name') + 'hurgelwurz');\n    user.propertyReset();\n    t.ok(user.p('name') === beforeName && user.p('email') === beforeEmail, 'Property reset did not properly reset `name` and `email`.');\n\n    t.done();\n  },\n\n\n  allProperties: function(t) {\n    var user = new UserMockup(),\n        should;\n    t.expect(2);\n\n    user.p('name', 'hurgelwurz');\n    user.p('email', 'hurgelwurz@test.de');\n    should = {\n      name: user.p('name'),\n      visits: user.p('visits'),\n      email: user.p('email'),\n      emailOptional: user.p('emailOptional'),\n      country: user.p('country'),\n      json: {},\n      id: user.id\n    }; // yes, this absolutely must be set correct for this test to work. sorry\n    t.same(should, user.allProperties(), 'Getting all properties failed.');\n\n    t.ok(user.allProperties(true) === JSON.stringify(should), 'Getting all properties as JSON failed.');\n\n    t.done();\n  }\n};\n\nexports.create = function (t) {\n  var user = new UserMockup();\n  t.expect(5);\n\n  user.p('name', 'createTest');\n  user.p('email', 'createTest@asdasd.de');\n  user.save(function (err) {\n    t.ok(!err, 'Saving a user did not work.');\n    if (err) {\n      console.dir(err);\n      console.dir(user.errors);\n      t.done();\n    }\n    redis.hgetall(prefix + ':hash:UserMockup:' + user.id, function (err, value) {\n      t.ok(!err, 'There was a redis error in the create test check.');\n      t.ok(value.name.toString() === 'createTest', 'The user name was not saved properly');\n      t.ok(value.visits.toString() === '0', 'The user visits were not saved properly');\n      t.ok(value.email.toString() === 'createTest@asdasd.de', 'The user email was not saved properly');\n      t.done();\n    });\n  });\n};\n\nexports.remove = function (t) {\n  var user = new UserMockup(),\n  testExists;\n  t.expect(9);\n\n  testExists = function (what, key, callback) {\n    redis.exists(key, function (err, value) {\n        t.ok(!err, 'There was a redis error in the remove test check.');\n        t.ok(value === 0, 'Deleting a user did not work: '+what+', key: '+key);\n        callback();\n      });\n  };\n\n  user.p('name', 'deleteTest');\n  user.p('email', 'deleteTest@asdasd.de');\n  user.save(function (err) {\n    t.ok(!err, 'There was an unexpected problem: ' + err);\n    if (err) {\n      t.done();\n    }\n    var id = user.id;\n    user.remove(function (err) {\n      t.ok(!err, 'There was a redis error in the remove test.');\n      if (err) {\n        t.done();\n      }\n      t.equals(user.id, 0, 'Removing an object from the db did not set the id to null');\n      user.id = id; // the other tests need it back. :D\n      async.series([\n        function (callback) {\n          testExists('hashes', prefix + ':hash:UserMockup:' + user.id, callback);\n        },\n        function (callback) {\n          redis.sismember(prefix + ':index:UserMockup:name:' + user.p('name'), user.id, function (err, value) {\n            t.ok((err === null && value === 0), 'Deleting a model did not properly delete the normal index.');\n          });\n          callback();\n        },\n        function (callback) {\n          redis.zscore(prefix + ':scoredindex:UserMockup:visits', user.id, function (err, value) {\n            t.ok((err === null && value === null), 'Deleting a model did not properly delete the scored index.');\n          });\n          callback();\n        },\n        function (callback) {\n          testExists('uniques', prefix + ':uniques:UserMockup:name:' + user.p('name'), callback);\n        }\n      ], t.done);\n    });\n  });\n};\n\nexports.idSets = function (t) {\n  var user = new UserMockup(),\n  tmpid = 0;\n  t.expect(6);\n  user.p('name', 'idSetTest');\n  user.save(function (err) {\n    t.ok(!err, 'There was an unexpected redis error.');\n    tmpid = user.id;\n    redis.sismember(prefix + ':idsets:' + user.modelName, tmpid, function (err, value) {\n      t.ok(!err, 'There was an unexpected redis error.');\n      t.equals(value, 1, 'The userid was not part of the idset after saving.');\n      user.remove(function (err) {\n        t.ok(!err, 'There was an unexpected redis error.');\n        redis.sismember(prefix + ':idsets:' + user.modelName, tmpid, function (err, value) {\n          t.ok(!err, 'There was an unexpected redis error.');\n          t.equals(value, 0, 'The userid was still part of the idset after removing.');\n          t.done();\n        });\n      });\n    });\n  });\n};\n\nexports.update = function (t) {\n  var user = new UserMockup();\n  t.expect(5);\n\n  user.p('name', 'updateTest1');\n  user.p('email', 'updateTest1@email.de');\n  user.save(function (err) {\n    t.ok(!err, 'There was a redis error in the update test. (creation part)');\n    if (err) {\n      t.done();\n    }\n    user.p('name', 'updateTest2');\n    user.p('email', 'updateTest2@email.de');\n    user.save(function (err) {\n      t.ok(!err, 'There was a redis error in the update test.');\n      if (err) {\n        t.done();\n      }\n      redis.hgetall(prefix + ':hash:UserMockup:' + user.id, function (err, value) {\n        t.ok(!err, 'There was a redis error in the update test check.');\n        if (err) {\n          t.done();\n        }\n        t.ok(value.name.toString() === 'updateTest2', 'The user name was not updated properly');\n        t.ok(value.email.toString() === 'updateTest2@email.de', 'The user email was not updated properly');\n        t.done();\n      });\n    });\n  });\n};\n\nexports.unique = function (t) {\n  var user1 = new UserMockup(),\n  user2 = new UserMockup();\n  t.expect(8);\n\n  user1.p('name', 'dubplicateTest');\n  user1.p('email', 'dubplicateTest@test.de');\n  user2.p('name', 'dubplicateTest');\n  user2.p('email', 'dubbplicateTest@test.de'); // intentional typo dubb\n  user1.save(function (err) {\n    t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n    redis.get(prefix + ':uniques:UserMockup:name:dubplicatetest', function (err, value) {\n      t.ok(user1.id, 'Userid b0rked while checking uniques');\n      t.equals(parseInt(value, 10), user1.id, 'The unique key did not have the correct id');\n      user2.valid(false, false, function (valid) {\n        t.ok(!valid, 'A unique property was not recognized as a duplicate in valid without setDirectly');\n        user2.save(function (err) {\n          t.equals(err, 'invalid', 'A saved unique property was not recognized as a duplicate');\n          redis.exists(prefix + ':uniques:UserMockup:email:dubbplicatetest@test.de', function (err, value) {\n            t.equals(value, 0, 'The tmp unique lock was not deleted for a failed save.');\n            redis.get(prefix + ':uniques:UserMockup:name:dubplicatetest', function (err, value) {\n              t.ok(!err, 'There was an unexpected probllem: ' + util.inspect(err));\n              t.same(parseInt(value, 10), user1.id, 'The unique key did not have the correct id after trying to save another unique.');\n              t.done();\n            });\n          });\n        });\n      });\n    });\n    if (err) {\n      t.done();\n    }\n  });\n};\n\nexports.uniqueLowerCase = function (t) {\n  var user1 = new UserMockup(),\n  user2 = new UserMockup();\n  t.expect(6);\n\n  user1.p('name', 'LowerCaseTest');\n  user1.p('email', 'LowerCaseTest@test.de');\n  user2.p('name', 'lowercasetest');\n  user2.p('email', 'lowercasetest@test.de');\n  user1.save(function (err) {\n    t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n    redis.get(prefix + ':uniques:UserMockup:name:'+user1.p('name').toLowerCase(), function (err, value) {\n      t.equals(parseInt(value, 10), user1.id, 'The unique key did not have the correct id');\n      user2.valid(false, false, function (valid) {\n        t.ok(!valid, 'A unique property was not recognized as a duplicate in valid without setDirectly.');\n        user2.save(function (err) {\n          t.equals(err, 'invalid', 'A saved unique property was not recognized as a duplicate');\n          redis.get(prefix + ':uniques:UserMockup:name:lowercasetest', function (err, value) {\n            t.ok(!err, 'There was an unexpected probllem: ' + util.inspect(err));\n            t.same(parseInt(value, 10), user1.id, 'The unique key did not have the correct id after trying to save another unique.');\n            t.done();\n          });\n        });\n      });\n    });\n    if (err) {\n      t.done();\n    }\n  });\n};\n\nexports.uniqueDeleteWhenOtherFails = function (t) {\n  var user = new UserMockup();\n  t.expect(2);\n\n  user.p('name', 'uniqueDeleteTest');\n  user.p('email', 'uniqueDeleteTest@test.de');\n  user.p('country', '');\n  user.save(function (err) {\n    t.same('invalid', err, 'There was an unexpected problem: ' + util.inspect(err));\n    redis.exists(prefix + ':uniques:UserMockup:name:'+user.p('name').toLowerCase(), function (err, value) {\n      t.equals(value, 0, 'The unique was locked although there were errors in the non-unique checks.');\n      t.done();\n    });\n  });\n};\n\nexports.uniqueOnlyCheckSpecified = function (t) {\n  var user = new UserMockup();\n  t.expect(2);\n\n  user.p('name', 'dubplicateTest');\n  user.p('email', 'dubplicateTest@test.de');\n  user.valid('name', function (valid) {\n    t.same(valid, false, 'Checking the duplication status failed in valid().');\n    t.same(user.errors.email, [], 'Checking the duplication status of one property set the error for another one.');\n    t.done();\n  });\n};\n\nexports.uniqueDeletion = function (t) {\n  var user = new UserMockup();\n  t.expect(2);\n\n  user.p({\n    'name': 'dubplicateDeletionTest',\n    'email': 'dubplicateDeletionTest@test.de',\n    'country': ''\n  });\n  \n  user.save(function (err) {\n    t.ok(err, 'The invalid property country did not trigger a failure.');\n    redis.exists(prefix + ':uniques:UserMockup:name:dubplicateDeletionTest', function (err, value) {\n      t.equals(value, 0, 'The tmp unique key was not deleted if a non-unique saving failure occured.');\n      t.done();\n    });\n  });\n};\n\nexports.uniqueCaseInSensitive = function (t) {\n  var user = new UserMockup();\n  var user2 = new UserMockup();\n  t.expect(4);\n\n  user.p({\n    'name': 'uniqueCaseInSensitive',\n    'email': 'uniqueCaseInSensitive@test.de'\n  });\n  user2.p({\n    'name': user.p('name').toLowerCase(),\n    'email': user.p('email').toLowerCase()\n  });\n  \n  user.save(function (err) {\n    t.ok( ! err, 'Saving failed');\n    user2.valid(function (valid) {\n      t.ok( ! valid, 'A duplicate (different case) unique property was validated.');\n      t.same(user2.errors.name, ['notUnique'], 'The error for name was not correct.');\n      t.same(user2.errors.email, ['notUnique'], 'The error for email was not correct.');\n      t.done();\n    });\n  });\n};\n\nexports.uniqueEmpty = function (t) {\n  var user = new UserMockup();\n  t.expect(5);\n  \n  redis.exists(prefix + ':uniques:UserMockup:emailOptional:', function (err, exists) {\n    t.ok( ! err, 'redis.keys failed.');\n    t.same(exists, 0, 'An empty unique was set before the test for it was run');\n    user.p({\n      'name': 'emailOptional',\n      'email': 'emailOptionalTest@test.de',\n      'emailOptional': ''\n    });\n    user.save(function (err) {\n      t.ok( ! err, 'Saving failed.');\n      redis.keys(prefix + ':uniques:UserMockup:emailOptional:', function (err, keys) {\n        t.ok( ! err, 'redis.keys failed.');\n        t.same(keys.length, 0, 'An empty unique was set');\n        t.done();\n      });\n    });\n  });\n};\n\nexports.indexes = function (t) {\n  var user = new UserMockup();\n  t.expect(7);\n\n  user.p('name', 'indexTest');\n  user.p('email', 'indexTest@test.de');\n  user.p('country', 'indexTestCountry');\n  user.p('visits', 20);\n\n  function checkCountryIndex(callback) {\n    redis.sismember(prefix + ':index:UserMockup:country:indexTestCountry', user.id, function (err, value) {\n      t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n      t.ok(value === 1, 'The country index did not have the user as one of its ids.');\n      callback();\n    });\n  }\n\n  function checkVisitsIndex(callback) {\n    redis.zscore(prefix + ':scoredindex:UserMockup:visits', user.id, function (err, value) {\n      t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n      t.ok(value == user.p('visits'), 'The visits index did not have the correct score.');\n      redis.sismember(prefix + ':index:UserMockup:visits:' + user.p('visits'), user.id, function (err, value) {\n        t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n        t.ok(value === 1, 'The visits index did not have the user as one of its ids.');\n        callback();\n      });\n    });\n  }\n\n  user.save(function (err) {\n    t.ok(!err, 'There was an unexpected problem: ' + util.inspect(err));\n    checkCountryIndex(function () {\n      checkVisitsIndex(t.done);\n    });\n  });\n};\n\nexports.__updated = function (t) {\n  var user = new UserMockup();\n  t.expect(2);\n  user.p('email', '__updatedTest@test.de');\n  user.save(function (err) {\n    if (err) {\n      t.ok(false, 'Error while saving user in test for __updated.');\n    }\n    user.p('name', 'hurgelwurz');\n    user.p('name', 'test');\n    t.ok(user.properties.name.__updated === false, 'Changing a var manually to the original didn\\'t reset the internal __updated var');\n\n    user.remove(function (err) {\n      if (err) {\n        util.debug('Error while saving user in __updated.');\n      }\n      user = new UserMockup();\n      user.p('name', 'hurgelwurz');\n      user.propertyReset();\n      t.ok(user.properties.name.__updated === false, 'Changing a var by propertyReset to the original didn\\'t reset the internal __updated var');\n      t.done();\n    });\n  });\n};\n\nexports.deleteNonExistant = function (t) {\n  var user = new UserMockup();\n  t.expect(1);\n  user.id = 987654321;\n  \n  user.remove(function (err) {\n    t.same(err, 'not found', 'Trying to delete an instance that doesn\\'t exist did not return \"not found\".');\n    t.done();\n  });\n};\n\nexports.methods = function (t) {\n  var user = new UserMockup();\n  t.expect(2);\n  \n  t.same(typeof(user.test), 'function', 'Adding a method to a model did not create that method on a new instance.');\n  t.same(user.test(), user.p('name'), 'The test method did not work properly. (probably doesn\\'t have the correct `this`.');\n  t.done();\n};\n\nexports.methodsSuper = function (t) {\n  var user = new UserMockup();\n  t.expect(4);\n  \n  t.same(typeof(user.prop), 'function', 'Overwriting a method in a model definition did not create that method on a new instance.');\n  t.same(typeof(user._super_prop), 'function', 'Overwriting a method in a model definition did not create the _super_ method on a new instance.');\n  t.same(user.prop('super'), user.p('name'), 'The super test method did not work properly.');\n  user.prop('name', 'methodTest');\n  t.same(user.p('name'), 'methodTest', 'The super test method did not properly handle arguments');\n  t.done();\n};\n\nexports[\"no super method if none needed\"] = function (t) {\n  var user = new UserMockup();\n  t.expect(1);\n  \n  t.ok(!user.hasOwnProperty('_super_test'), 'Defining a method that does not overwrite a nohm method created a _super_.');\n  t.done();\n};\n\nexports.uniqueDefaultOverwritten = function (t) {\n  var user = new UserMockup();\n  var user2 = new UserMockup();\n  t.expect(3);\n  \n  user.save(function (err) {\n    t.ok(!err, 'Unexpected saving error.');\n    user2.save(function (err) {\n      t.same(err, 'invalid', 'Saving a default unique value did not return with the error \"invalid\"');\n      t.same(user2.errors.name, ['notUnique'], 'Saving a default unique value returned the wrong error: '+user2.errors.name);\n      t.done();\n    });\n  });\n};\n\nexports.allPropertiesJson = function (t) {\n  var user = new UserMockup();\n  user.p('json', {test: 1});\n  user.p({\n    name: 'allPropertiesJson',\n    email: 'allPropertiesJson@test.de'\n  });\n  t.expect(2);\n  \n  user.save(function (err) {\n    t.ok(!err, 'Unexpected saving error.');\n    var testProps = user.allProperties();\n    t.same(testProps.json, user.p('json'), 'allProperties did not properly parse json properties');\n    t.done();\n  });\n};\n\nexports.thisInCallbacks = function (t) {\n  var user = new UserMockup();\n  var checkCounter = 0;\n  var checkSum = 11;\n  var checkThis = function (name, cb) {\n    return function () {\n      checkCounter++;\n      t.ok(this instanceof UserMockup, '`this` is not set to the instance in '+name);\n      if (checkCounter === checkSum) {\n        done();\n      } else if (typeof(cb) === 'function') {\n        cb();\n      }\n    };\n  };\n  t.expect(checkSum+1);\n  \n  var done = function () {\n    user.remove(checkThis('remove', function () {\n      t.done();\n    }));\n  };\n  \n  user.save(checkThis('createError', function () {\n    user.p({\n      name: 'thisInCallbacks',\n      email: 'thisInCallbacks@test.de'\n    });\n    user.link(user, checkThis('link'));\n    user.save(checkThis('create', function () {\n      user.load(user.id, checkThis('load'));\n      user.find({name: 'thisInCallbacks'}, checkThis('find'));\n      user.save(checkThis('update', function (){\n        user.p('email', 'asd');\n        user.save(checkThis('updateError'));\n      }));\n      user.belongsTo(user, checkThis('belongsTo'));\n      user.getAll('UserMockup', checkThis('getAll'));\n      user.numLinks('UserMockup', checkThis('numLinks'));\n      user.unlinkAll(null, checkThis('unlinkAll'));\n    }));\n  }));\n};\n\nexports.defaultAsFunction = function (t) {\n  t.expect(3);\n  \n  var TestMockup = nohm.model('TestMockup', {\n      properties: {\n        time: {\n          type: 'timestamp',\n          defaultValue: function () {\n            return (+ new Date());\n          }\n        }\n      }\n    });\n  var test1 = new TestMockup();\n  setTimeout(function () {\n    var test2 = new TestMockup();\n    \n    t.ok(typeof(test1.p('time')) === 'number', 'time of test1 is not a number');\n    t.ok(typeof(test2.p('time')) === 'number', 'time of test2 is not a number');\n    t.ok(test1.p('time') < test2.p('time'), 'time of test2 is not lower than test1');\n    t.done();\n  }, 10);\n};\n\nexports.defaultIdGeneration = function (t) {\n  t.expect(2);\n  \n  var TestMockup = nohm.model('TestMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'defaultIdGeneration'\n        }\n      }\n    });\n  var test1 = new TestMockup();\n  test1.save(function (err) {\n    t.ok(!err, 'There was an error while saving.');\n    t.same(typeof(test1.id), 'string', 'The generated id was not a string');\n    t.done();\n  });\n};\n\nexports.instanceLoad = function (t) {\n  t.expect(1);\n  new UserMockup(1123123, function (err) {\n    t.same(err, 'not found', 'Instantiating a user with an id and callback did not try to load it');\n    t.done();\n  });\n};\n\nexports.factory = function (t) {\n  t.expect(4);\n  var name = 'UserMockup';\n  var user = nohm.factory(name);\n  t.same(user.modelName, name, 'Using the factory to get an instance did not work.');\n  \n  var user2 = nohm.factory(name, 1234124235, function (err) {\n    t.same(err, 'not found', 'Instantiating a user via factory with an id and callback did not try to load it');\n    t.same(user.modelName, name, 'Using the factory to get an instance (with id) did not work.');\n    t.done();\n  });\n  t.ok(user2, 'Using the factory with an id and callback returned false');\n};\n\nexports[\"factory with non-integer id\"] = function (t) {\n  t.expect(3);\n  var name = 'NonIncrement';\n  var obj = nohm.factory(name);\n  obj.p('name', 'factory_non_integer_load');\n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    var obj2 = nohm.factory(name, obj.id, function (err) {\n      t.ok(!err, 'Unexpected factory loading error');\n      t.same(obj2.allProperties(), obj.allProperties(), 'The loaded object seems to have wrong properties');\n      t.done();\n    });\n  });\n};\n\nexports.purgeDB = function (t) {\n  var expected = 1;\n  var countKeys = function (prefix, callback) {\n    redis.keys(prefix+'*', function (err, orig_num) {\n      callback(err, orig_num.length);\n    });\n  };\n  \n  var tests = [];\n  Object.keys(nohm.prefix).forEach(function (key) {\n    expected += 2;\n    tests.push(async.apply(countKeys, nohm.prefix[key]));\n  });\n  \n  async.series(tests, function (err, num_arr) {\n    t.ok(!err, 'Unexpected redis error');\n    var count = num_arr.reduce(function (num, add) { return num + add; }, 0);\n    t.ok(count > 0, 'Database did not have any keys');\n    nohm.purgeDb(function (err) {\n      t.ok(!err, 'Unexpected redis error');\n      async.series(tests, function (err, num_arr) {\n        t.ok(!err, 'Unexpected redis error');\n        var count = num_arr.reduce(function (num, add) { return num + add; }, 0);\n        t.same(count, 0, 'Database did have keys left after purging.');\n        t.done();\n      });\n    });\n  });\n};\n\nexports[\"integer uniques\"] = function (t) {\n  t.expect(5);\n  var obj = nohm.factory('UniqueInteger');\n  var obj2 = nohm.factory('UniqueInteger');\n  obj.p('unique', 123);\n  obj2.p('unique', 123);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    t.same(obj.allProperties(), {\n      unique: 123,\n      id: obj.id\n    }, 'Properties not correct');\n    obj2.save(function (err) {\n      t.same(err, 'invalid', 'Unique integer conflict did not result in error.');\n      obj.remove(function (err) {\n        t.ok(!err, 'Unexpected removing error');\n        obj2.save(function () {\n          t.ok(!err, 'Unexpected saving error');\n          t.done();\n        });\n      });\n    });\n  });\n};\n\nexports[\"no key left behind\"] = function (t) {\n  var user = nohm.factory('UserMockup');\n  var user2 = nohm.factory('UserMockup');\n  t.expect(3);\n  \n  user2.p({\n    name: 'user2',\n    email: 'user2@test.com'\n  });\n  \n  user.link(user2);\n  user2.link(user, 'father');\n  \n  async.series([\n    async.apply(h.cleanUp, redis, args.prefix),\n    function (cb) {\n      user.save(cb);\n    },\n    function (cb) {\n      user2.save(cb);\n    },\n    function (cb) {\n      user.unlink(user2);\n      user2.save(cb);\n    },\n    function (cb) {\n      user2.remove(cb);\n    },\n    function (cb) {\n      user.remove(cb);\n    }\n  ], function (err) {\n      t.ok(!err, 'Unexpected saving error');\n      redis.keys(prefix + ':*', function (err, keys) {\n        t.ok(!err, 'Unexpected saving error');\n        t.same(keys.length, 1, 'Not all keys were removed from the database'); // we keep the idsets and meta keys (version, idgenerator and properties), so it should be 4 here.\n        t.done();\n      });\n    }\n  );\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":30502}]],"length":30502}
{"contributors":[],"silentsave":false,"ts":1342146038718,"patch":[[{"diffs":[[0,"  }\n  );\n};\n"],[1,"\nexports[\"new Nohm() model cache\"] = function (t) {\n  t.expect(1);\n  var user = nohm.factory('UserMockup');\n  var new_nohm = new require('nohm').Nohm();\n  new_nohm.model('UserMockup', {\n    properties: {\n      well_shit: {\n        type: 'string'\n      }\n    }\n  });\n  \n  t.same(user.allProperties(), new_nohm.allProperties(), 'HURASDASF');\n  t.done();\n};\n"]],"start1":30490,"start2":30490,"length1":12,"length2":367}]],"length":30857,"saved":false}
{"ts":1342146093668,"patch":[[{"diffs":[[0,"require("],[-1,"'"],[1,"__dirname+'/../lib/"],[0,"nohm').N"]],"start1":30631,"start2":30631,"length1":17,"length2":35}]],"length":30875,"saved":false}
{"ts":1342146201026,"patch":[[{"diffs":[[0,"ew_nohm."],[1,"factory('UserMockup')."],[0,"allPrope"]],"start1":30821,"start2":30821,"length1":16,"length2":38},{"diffs":[[0,"URASDASF');\n"],[1,"  []();\n"],[0,"  t.done();\n"]],"start1":30870,"start2":30870,"length1":24,"length2":32}]],"length":30905,"saved":false}
{"ts":1342146625183,"patch":[[{"diffs":[[0,"');\n"],[1,"  \n"],[0,"  var "],[-1,"new_nohm = new require(__dirname+'/../lib/nohm').Nohm();\n  new_"],[1,"TempUserMockup = "],[0,"nohm"]],"start1":30606,"start2":30606,"length1":77,"length2":34},{"diffs":[[0," }\n    }\n  }"],[1,", true);\n  var new_user = new TempUserMockup("],[0,");\n  \n  t.sa"]],"start1":30728,"start2":30728,"length1":24,"length2":69},{"diffs":[[0,"new_"],[-1,"nohm.factory('UserMockup')"],[1,"user"],[0,".all"]],"start1":30822,"start2":30822,"length1":34,"length2":12}]],"length":30885,"saved":false}
{"ts":1342146715211,"patch":[[{"diffs":[[0,"erMockup');\n"],[1,"  var user2 = nohm.factory('UserMockup');\n"],[0,"  \n"],[-1,""],[0,"  var TempUs"]],"start1":30598,"start2":30598,"length1":27,"length2":69},{"diffs":[[0,"p();\n  \n  t."],[-1,"same"],[1,"deepEqual(user.allProperties(), user2.allProperties(), 'HURASDASF');\n  t.notDeepEqual"],[0,"(user.allPro"]],"start1":30825,"start2":30825,"length1":28,"length2":109},{"diffs":[[0,"');\n"],[-1,"  []();\n"],[0,"  t."]],"start1":30981,"start2":30981,"length1":16,"length2":8}]],"length":31000,"saved":false}
{"ts":1342146716583,"patch":[[{"diffs":[[0,"\n  t.expect("],[-1,"1"],[1,"2"],[0,");\n  var use"]],"start1":30553,"start2":30553,"length1":25,"length2":25}]],"length":31000,"saved":false}
{"ts":1342146911560,"patch":[[{"diffs":[[0,"ts[\""],[-1,"new Nohm() model cache"],[1,"temporary model definitions"],[0,"\"] ="]],"start1":30508,"start2":30508,"length1":30,"length2":35}]],"length":31005,"saved":false}
{"contributors":[],"silentsave":false,"ts":1342891100443,"patch":[[{"diffs":[[0,"  });\n  });\n};\n\n"],[1,"exports[\"integer uniques\"] = function (t) {\n  t.expect(5);\n  var obj = nohm.factory('UniqueInteger');\n  var obj2 = nohm.factory('UniqueInteger');\n  obj.p('unique', 123);\n  obj2.p('unique', 123);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    t.same(obj.allProperties(), {\n      unique: 123,\n      id: obj.id\n    }, 'Properties not correct');\n    obj2.save(function (err) {\n      t.same(err, 'invalid', 'Unique integer conflict did not result in error.');\n      obj.remove(function (err) {\n        t.ok(!err, 'Unexpected removing error');\n        obj2.save(function () {\n          t.ok(!err, 'Unexpected saving error');\n          t.done();\n        });\n      });\n    });\n  });\n};\n\n"],[0,"exports.indexes "]],"start1":19508,"start2":19508,"length1":32,"length2":742},{"diffs":[[0,"};\n\n"],[-1,"exports[\"integer uniques\"] = function (t) {\n  t.expect(5);\n  var obj = nohm.factory('UniqueInteger');\n  var obj2 = nohm.factory('UniqueInteger');\n  obj.p('unique', 123);\n  obj2.p('unique', 123);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    t.same(obj.allProperties(), {\n      unique: 123,\n      id: obj.id\n    }, 'Properties not correct');\n    obj2.save(function (err) {\n      t.same(err, 'invalid', 'Unique integer conflict did not result in error.');\n      obj.remove(function (err) {\n        t.ok(!err, 'Unexpected removing error');\n        obj2.save(function () {\n          t.ok(!err, 'Unexpected saving error');\n          t.done();\n        });\n      });\n    });\n  });\n};\n\n"],[0,"expo"]],"start1":29503,"start2":29503,"length1":718,"length2":8}]],"length":31005,"saved":false}
{"ts":1342891128822,"patch":[[{"diffs":[[0,"  });\n  });\n};\n\n"],[1,"exports[\"changing unique property frees the value\"] = function (t) {\n  t.expect(5);\n  var obj = nohm.factory('UniqueInteger');\n  var obj2 = nohm.factory('UniqueInteger');\n  obj.p('unique', 123);\n  obj2.p('unique', 123);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    t.same(obj.allProperties(), {\n      unique: 123,\n      id: obj.id\n    }, 'Properties not correct');\n    obj2.save(function (err) {\n      t.same(err, 'invalid', 'Unique integer conflict did not result in error.');\n      obj.remove(function (err) {\n        t.ok(!err, 'Unexpected removing error');\n        obj2.save(function () {\n          t.ok(!err, 'Unexpected saving error');\n          t.done();\n        });\n      });\n    });\n  });\n};\n\n"],[0,"exports.indexes "]],"start1":20218,"start2":20218,"length1":32,"length2":767}]],"length":31740,"saved":false}
{"ts":1342891208525,"patch":[[{"diffs":[[0,"y('U"],[-1,"niqueInteger');\n  var obj2 = nohm.factory('UniqueInteger');\n  obj.p('unique', 123);\n  obj2.p('unique', 123);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    t.same(obj.allProperties(), {\n      unique: 123,\n      id: obj.id\n    }, 'Properties not correct');"],[1,"serMockup');\n  obj.p('unique', \"changing unique property frees the value\");\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    obj.p('unique', \"changing unique property frees the value to something else\")"],[0,"\n    obj"],[-1,"2"],[0,".sav"]],"start1":20341,"start2":20341,"length1":303,"length2":247}]],"length":31684,"saved":false}
{"ts":1342891308451,"patch":[[{"diffs":[[0,"t) {\n  t.expect("],[-1,"5"],[1,"3"],[0,");\n  var obj = n"]],"start1":20298,"start2":20298,"length1":33,"length2":33},{"diffs":[[0,"up');\n  "],[-1,"obj.p('unique',"],[1,"var old ="],[0," \"changi"]],"start1":20352,"start2":20352,"length1":31,"length2":25},{"diffs":[[0,"e value\""],[1,";\n  obj.p('unique', old"],[0,");\n  \n  "]],"start1":20404,"start2":20404,"length1":16,"length2":39},{"diffs":[[0,"  t."],[-1,"same("],[1,"ok(!"],[0,"err, '"],[-1,"invalid', 'Unique integer conflict did not result "],[1,"Unexpected sav"],[0,"in"],[1,"g"],[0," error"],[-1,"."],[0,"');\n"]],"start1":20628,"start2":20628,"length1":78,"length2":41},{"diffs":[[0,"obj."],[-1,"remove(function (err) {\n        t.ok(!err, 'Unexpected removing error'"],[1,"p('unique', old"],[0,");\n "]],"start1":20675,"start2":20675,"length1":78,"length2":23},{"diffs":[[0,"e', old);\n      "],[-1," "],[-1," "],[0,"obj"],[-1,"2"],[0,".save(function ("]],"start1":20687,"start2":20687,"length1":38,"length2":35},{"diffs":[[0,".save(function ("],[1,"err"],[0,") {\n"],[-1,"  "],[0,"        t.ok(!er"]],"start1":20706,"start2":20706,"length1":38,"length2":39},{"diffs":[[0,"ng error"],[-1,"');\n          t.done("],[1,". (May be because old uniques are not freed properly on chnage.'"],[0,");\n     "]],"start1":20764,"start2":20764,"length1":37,"length2":80},{"diffs":[[0,"age.');\n        "],[-1,"}"],[1,"t.done("],[0,");\n      });\n   "]],"start1":20831,"start2":20831,"length1":33,"length2":39}]],"length":31656,"saved":false}
{"ts":1342891436655,"patch":[[{"diffs":[[0,"\n    if (err) {\n"],[1,"      console.log(err);\n"],[0,"      t.ok(false"]],"start1":22404,"start2":22404,"length1":32,"length2":56}]],"length":31680,"saved":false}
{"ts":1342891477232,"patch":[[{"diffs":[[0,".expect(2);\n"],[1,"  user.p('name', '__updatedTest');\n"],[0,"  user.p('em"]],"start1":22320,"start2":22320,"length1":24,"length2":59}]],"length":31715,"saved":false}
{"ts":1342891522190,"patch":[[{"diffs":[[0,"2);\n"],[-1,"  user.p('name', '__updatedTest');\n"],[0,"  us"]],"start1":22328,"start2":22328,"length1":43,"length2":8}]],"length":31680,"saved":false}
{"ts":1342891553441,"patch":[[{"diffs":[[0,"m.factory('U"],[-1,"serMockup"],[1,"niqueInteger"],[0,"');\n  var ol"]],"start1":20333,"start2":20333,"length1":33,"length2":36},{"diffs":[[0,"d = "],[-1,"\"changing unique property frees the value\""],[1,"1234"],[0,";\n  "]],"start1":20369,"start2":20369,"length1":50,"length2":12},{"diffs":[[0,"e', "],[-1,"\"changing unique property frees the value to something else\""],[1,"12345"],[0,")\n  "]],"start1":20493,"start2":20493,"length1":68,"length2":13}]],"length":31590,"saved":false}
{"ts":1342891635111,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"exports[\"changing unique property frees the value\"] = function (t) {\n  t.expect(3);\n  var obj = nohm.factory('UniqueInteger');\n  var old = 1234;\n  obj.p('unique', old);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    obj.p('unique', 12345)\n    obj.save(function (err) {\n      t.ok(!err, 'Unexpected saving error');\n      obj.p('unique', old);\n      obj.save(function (err) {\n        t.ok(!err, 'Unexpected saving error. (May be because old uniques are not freed properly on chnage.');\n        t.done();\n      });\n    });\n  });\n};\n\n"],[0,"expo"]],"start1":20230,"start2":20230,"length1":569,"length2":8},{"diffs":[[0,"SDASF');\n  t.done();\n};\n"],[1,"\nexports[\"changing unique property frees the value\"] = function (t) {\n  t.expect(3);\n  var obj = nohm.factory('UserMockup');\n  var old = \"changing unique property frees the value\";\n  obj.p('unique', old);\n  \n  obj.save(function (err) {\n    t.ok(!err, 'Unexpected saving error');\n    obj.p('unique', \"changing unique property frees the value to something else\")\n    obj.save(function (err) {\n      t.ok(!err, 'Unexpected saving error');\n      obj.p('unique', old);\n      obj.save(function (err) {\n        t.ok(!err, 'Unexpected saving error. (May be because old uniques are not freed properly on chnage.');\n        t.done();\n      });\n    });\n  });\n};\n"]],"start1":31005,"start2":31005,"length1":24,"length2":675}]],"length":31680,"saved":false}
{"ts":1342891725797,"patch":[[{"diffs":[[0," chnage.');\n"],[1,"        []();\n"],[0,"        t.do"]],"start1":31623,"start2":31623,"length1":24,"length2":38}]],"length":31694,"saved":false}
{"ts":1342891833170,"patch":[[{"diffs":[[0,"alue\";\n  obj.p('"],[-1,"uniqu"],[1,"nam"],[0,"e', old);\n  \n  o"]],"start1":31203,"start2":31203,"length1":37,"length2":35},{"diffs":[[0,"\n    obj.p('"],[-1,"uniqu"],[1,"nam"],[0,"e', \"changin"]],"start1":31305,"start2":31305,"length1":29,"length2":27},{"diffs":[[0,"     obj.p('"],[-1,"uniqu"],[1,"nam"],[0,"e', old);\n  "]],"start1":31462,"start2":31462,"length1":29,"length2":27}]],"length":31688,"saved":false}
{"ts":1342891838650,"patch":[[{"diffs":[[0,"');\n"],[-1,"        []();\n"],[0,"    "]],"start1":31625,"start2":31625,"length1":22,"length2":8}]],"length":31674,"saved":false}
{"ts":1342891847012,"patch":[[{"diffs":[[0,"n chnage.');"],[1,"[]()"],[0,"\n        t.d"]],"start1":31616,"start2":31616,"length1":24,"length2":28}]],"length":31678,"saved":false}
{"ts":1342891902567,"patch":[[{"diffs":[[0,"erMockup');\n"],[1,"  var obj2 = nohm.factory('UserMockup');\n"],[0,"  var old = "]],"start1":31142,"start2":31142,"length1":24,"length2":65},{"diffs":[[0,"value\";\n"],[-1,""],[0,"  obj.p("]],"start1":31243,"start2":31243,"length1":16,"length2":16},{"diffs":[[0,"r');\n    obj"],[1,"2.load(obj.id, function () {\n      obj2"],[0,".p('name', \""]],"start1":31342,"start2":31342,"length1":24,"length2":63},{"diffs":[[0," else\")\n    "],[1,"  "],[0,"obj"],[1,"2"],[0,".save(functi"]],"start1":31458,"start2":31458,"length1":27,"length2":30},{"diffs":[[0,"n (err) {\n      "],[1,"  "],[0,"t.ok(!err, 'Unex"]],"start1":31489,"start2":31489,"length1":32,"length2":34},{"diffs":[[0,";\n      "],[1,"  "],[0,"obj"],[1,"2"],[0,".p('name"]],"start1":31544,"start2":31544,"length1":19,"length2":22},{"diffs":[[0,";\n      "],[1,"  "],[0,"obj"],[1,"2"],[0,".save(fu"]],"start1":31573,"start2":31573,"length1":19,"length2":22},{"diffs":[[0,"(err) {\n        "],[1,"  "],[0,"t.ok(!err, 'Unex"]],"start1":31602,"start2":31602,"length1":32,"length2":34},{"diffs":[[0,"');[]()\n        "],[1,"  "],[0,"t.done();\n      "]],"start1":31718,"start2":31718,"length1":32,"length2":34},{"diffs":[[0,"      t.done();\n"],[1,"        });\n"],[0,"      });\n    })"]],"start1":31730,"start2":31730,"length1":32,"length2":44}]],"length":31785,"saved":false}
{"ts":1342891941781,"patch":[[{"diffs":[[0,"erMockup');\n"],[1,"  var obj3 = nohm.factory('UserMockup');\n"],[0,"  var old = "]],"start1":31183,"start2":31183,"length1":24,"length2":65},{"diffs":[[0,"saving error');\n"],[1,"        obj3.load(obj.id, function () {\n  "],[0,"        obj2.p('"]],"start1":31571,"start2":31571,"length1":32,"length2":74},{"diffs":[[0,", old);\n"],[1,"  "],[0,"        "]],"start1":31650,"start2":31650,"length1":16,"length2":18},{"diffs":[[0,"unction (err) {\n"],[1,"  "],[0,"          t.ok(!"]],"start1":31679,"start2":31679,"length1":32,"length2":34},{"diffs":[[0,";[]()\n          "],[1,"  "],[0,"t.done();\n      "]],"start1":31807,"start2":31807,"length1":32,"length2":34},{"diffs":[[0,"done();\n        "],[1,"  "],[0,"});\n"],[1,"        }(M\n"],[0,"      });\n    })"]],"start1":31827,"start2":31827,"length1":36,"length2":50}]],"length":31888,"saved":false}
{"ts":1342891944330,"patch":[[{"diffs":[[0,"       }"],[-1,"(M"],[1,");"],[0,"\n      }"]],"start1":31850,"start2":31850,"length1":18,"length2":18}]],"length":31888,"saved":false}
{"contributors":[],"silentsave":false,"ts":1342892655915,"patch":[[{"diffs":[[0,"que "],[-1,"property frees th"],[1,"frees old unique with uppercas"],[0,"e value"],[1,"s"],[0,"\"] ="]],"start1":31051,"start2":31051,"length1":32,"length2":46},{"diffs":[[0," = \""],[-1,"c"],[1,"C"],[0,"hanging "],[-1,"u"],[1,"U"],[0,"nique "],[-1,"p"],[1,"P"],[0,"roperty "],[-1,"f"],[1,"F"],[0,"rees "],[-1,"the v"],[1,"The V"],[0,"alue"]],"start1":31259,"start2":31259,"length1":44,"length2":44}]],"length":31902,"saved":false}
{"ts":1342892787832,"patch":[[{"diffs":[[0,".');"],[-1,"[]()"],[0,"\n   "]],"start1":31818,"start2":31818,"length1":12,"length2":8}]],"length":31898,"saved":false}
{"contributors":[],"silentsave":true,"ts":1342893027685,"patch":[[{"diffs":[[0,"sets"],[-1," and meta keys (version, idgenerator and properties)"],[0,", so"]],"start1":30402,"start2":30402,"length1":60,"length2":8},{"diffs":[[0,"ould be "],[-1,"4"],[1,"1"],[0," here.\n "]],"start1":30416,"start2":30416,"length1":17,"length2":17},{"diffs":[[0,"};\n\n"],[-1,"exports[\"temporary model definitions\"] = function (t) {\n  t.expect(2);\n  var user = nohm.factory('UserMockup');\n  var user2 = nohm.factory('UserMockup');\n  \n  var TempUserMockup = nohm.model('UserMockup', {\n    properties: {\n      well_shit: {\n        type: 'string'\n      }\n    }\n  }, true);\n  var new_user = new TempUserMockup();\n  \n  t.deepEqual(user.allProperties(), user2.allProperties(), 'HURASDASF');\n  t.notDeepEqual(user.allProperties(), new_user.allProperties(), 'HURASDASF');\n  t.done();\n};\n\n"],[0,"expo"]],"start1":30471,"start2":30471,"length1":511,"length2":8},{"diffs":[[0,"\n      });\n    });\n  });\n};\n"],[1,">>>>>>> Stashed changes\n"]],"start1":31315,"start2":31315,"length1":28,"length2":52}]],"length":31367,"saved":false}
{"ts":1342893029559,"patch":[[{"diffs":[[0,"});\n"],[-1,"};\n>>>>>>> Stashed changes\n"]],"start1":31336,"start2":31336,"length1":31,"length2":4}]],"length":31340,"saved":false}
{"ts":1342893030745,"patch":[[{"diffs":[[0,"});\n      });\n    });\n  });\n"],[1,"};\n>>>>>>> Stashed changes\n"]],"start1":31312,"start2":31312,"length1":28,"length2":55}]],"length":31367,"saved":false}
{"ts":1342893032264,"patch":[[{"diffs":[[0,"\n};\n"],[-1,">>>>>>> Stashed changes\n"]],"start1":31339,"start2":31339,"length1":28,"length2":4}]],"length":31343,"saved":false}
{"contributors":[],"silentsave":true,"ts":1342893524768,"patch":[[{"diffs":[[0,"e idsets"],[1," and meta keys (version, idgenerator and properties)"],[0,", so it "]],"start1":30398,"start2":30398,"length1":16,"length2":68},{"diffs":[[0,"ould be "],[-1,"1"],[1,"4"],[0," here.\n "]],"start1":30468,"start2":30468,"length1":17,"length2":17},{"diffs":[[0," }\n  );\n};\n\n"],[1,"exports[\"temporary model definitions\"] = function (t) {\n  t.expect(2);\n  var user = nohm.factory('UserMockup');\n  var user2 = nohm.factory('UserMockup');\n  \n  var TempUserMockup = nohm.model('UserMockup', {\n    properties: {\n      well_shit: {\n        type: 'string'\n      }\n    }\n  }, true);\n  var new_user = new TempUserMockup();\n  \n  t.deepEqual(user.allProperties(), user2.allProperties(), 'HURASDASF');\n  t.notDeepEqual(user.allProperties(), new_user.allProperties(), 'HURASDASF');\n  t.done();\n=======\n"],[0,"exports[\"cha"]],"start1":30515,"start2":30515,"length1":24,"length2":531},{"diffs":[[0,"});\n      });\n    });\n  });\n"],[1,">>>>>>> master\n"],[0,"};\n"]],"start1":31871,"start2":31871,"length1":31,"length2":46}]],"length":31917,"saved":false}
{"ts":1342893527137,"patch":[[{"diffs":[[0,"();\n"],[-1,"======="],[1,"  "],[0,"\nexp"]],"start1":31022,"start2":31022,"length1":15,"length2":10}]],"length":31912,"saved":false}
{"ts":1342893529432,"patch":[[{"diffs":[[0,"});\n"],[-1,">>>>>>> master\n"],[0,"};\n"]],"start1":31890,"start2":31890,"length1":22,"length2":7}]],"length":31897,"saved":false}
{"ts":1342893533483,"patch":[[{"diffs":[[0,"done();\n"],[1,"});\n"],[0,"  \nexpor"]],"start1":31018,"start2":31018,"length1":16,"length2":20}]],"length":31901,"saved":false}
{"ts":1342893535935,"patch":[[{"diffs":[[0,"one();\n}"],[-1,");"],[0,"\n  \nexpo"]],"start1":31019,"start2":31019,"length1":18,"length2":16}]],"length":31899,"saved":false}
{"ts":1342893539665,"patch":[[{"diffs":[[0,"one();\n}"],[1,";"],[0,"\n  \nexpo"]],"start1":31019,"start2":31019,"length1":16,"length2":17}]],"length":31900,"saved":false}
{"ts":1342893542908,"patch":[[{"diffs":[[0,"g else\")"],[1,";"],[0,"\n      o"]],"start1":31514,"start2":31514,"length1":16,"length2":17}]],"length":31901,"saved":false}
