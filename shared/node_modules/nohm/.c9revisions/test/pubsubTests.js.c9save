{"ts":1341348376256,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var redis = require('redis');\nvar nohm = require(__dirname+'/../lib/nohm').Nohm;\nvar child_process = require('child_process');\n\nrequire(__dirname+'/pubsub/Model.js');\n\nvar child_path = __dirname+'/pubsub/child.js';\n\nvar after = function (times, fn) {\n  return function () {\n    if ((--times) <= 0) {\n      fn.apply(this, arguments);\n    }\n  };\n};\n\nvar error_callback = function (t) {\n  return function (err) {\n    t.ok(!err, 'Callback received an error');\n  };\n};\n\nvar secondaryClient = redis.createClient();\n\nmodule.exports = {\n  \n  'after helper function': function(t) {\n\n    var counter = 0;\n  \n    var _test = after(3, function () {\n      counter += 1;\n    });\n  \n    _test();_test();_test();\n  \n    t.equal(counter, 1, 'Function has been called a wrong number of times');\n    t.done();\n  \n  },\n  \n  'set/get pubSub client': function (t) {\n    t.expect(3);\n    nohm.setPubSubClient(secondaryClient, function (err) {\n      t.ok(!err, 'There was an error while subscribing');\n      t.same(nohm.getPubSubClient(), secondaryClient, 'Second redis client wasn\\'t set properly');\n      t.ok(nohm.getPubSubClient().subscriptions, 'Second redis client isn\\'t subscribed to anything');\n      t.done();\n    });\n  },\n  \n  'unsubscribe': function (t) {\n    t.expect(1);\n    nohm.closePubSub(function (err, client) {\n      t.same(client, secondaryClient, 'closePubSub returned a wrong redis client');\n      client.end();\n      t.done();\n    });\n  },\n  \n  'set/get publish bool': function (t) {\n    t.expect(4);\n    \n    var no_publish = nohm.factory('no_publish');\n    t.same(no_publish.getPublish(), false, 'model without publish returned true');\n    \n    var publish = nohm.factory('Tester');\n    t.same(publish.getPublish(), true, 'model with publish returned false');\n    \n    nohm.setPublish(true);\n    t.same(no_publish.getPublish(), true, 'model without publish but global publish returned false');\n    \n    nohm.setPublish(false);\n    t.same(publish.getPublish(), true, 'model with publish and global publish false returned false');\n    \n    t.done();\n  },\n    \n  'nohm in child process doesn\\'t have pubsub yet': function (t) {\n    t.expect(1);\n    var question = 'does nohm have pubsub?';\n    var child = child_process.fork(child_path);\n    var checkNohmPubSubNotInitialized = function (msg) {\n      if (msg.question === question) {\n        t.same(msg.answer, false, 'PubSub in the child process was already initialized.');\n        child.kill();\n        t.done();\n      }\n    };\n    child.on('message', checkNohmPubSubNotInitialized);\n    child.send({question: question});\n  },\n  \n  'initialized': {\n    setUp: function (next) {\n      var child = this.child = child_process.fork(child_path, process.argv);\n      child.on('message', function (msg) {\n        if (msg.question === 'initialize' && msg.answer === true) {\n          next();\n        }\n        if (msg.error) {\n          throw new Error(msg.error);\n        }\n      });\n      \n      child.ask = function (request, callback) {\n        child.send(request);\n        child.on('message', function (msg) {\n          if (msg.question === request.question) {\n            callback(msg);\n          }\n        });\n      };\n      child.send({question: 'initialize'});\n    },\n    \n    tearDown: function (next) {\n      this.child.kill();\n      nohm.closePubSub(function (err, client) {\n        client.end();\n        next();\n      });\n    },\n    \n    'create': function (t) {\n      t.expect(5);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'create');\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'create',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var target = msg.answer.target;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, target.id, 'Id from create event wrong');\n        t.same(instance.modelName, target.modelName, 'Modelname from create event wrong');\n        t.same(instance.allProperties(), target.properties, 'Properties from create event wrong');\n        t.done();\n      });\n      \n      instance.save(error_callback(t));\n    },\n    \n    'update': function (t) {\n      t.expect(7);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'update');\n      var diff;\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'update',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from update event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from update event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from update event wrong');\n        t.same(diff, answer.target.diff, 'Properties from update event wrong');\n        t.done();\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        instance.p('dummy', 'updatededed');\n        diff = instance.propertyDiff();\n        instance.save(error_callback(t));\n      });\n    },\n    \n    'save': function (t) {\n      t.expect(10);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'save');\n      \n      \n      var counter = 0;      \n      var props = [];\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'save',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from save event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from save event wrong');\n        t.same(props[counter], answer.target.properties, 'Properties from save event wrong');\n        counter++;\n        if (counter >= 2) {\n          t.done();\n        }\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        props.push(instance.allProperties());\n        instance.p('dummy', 'save_the_second');\n        props.push(instance.allProperties());\n        instance.save(error_callback(t));\n      });\n    },\n    \n    'remove': function (t) {\n      t.expect(6);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'remove');\n      var old_id;\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'remove',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.same(instance.id, 0, 'ID was not reset properly before the child returned the event.');\n        t.same(old_id, answer.target.id, 'Id from remove event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from remove event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from remove event wrong');\n        t.done();\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        old_id = instance.id;\n        instance.remove(error_callback(t));\n      });\n    },\n    \n    'link': function (t) {\n      t.expect(9);\n      var instance_child = nohm.factory('Tester');\n      var instance_parent = nohm.factory('Tester');\n      instance_child.p('dummy', 'link_child');\n      instance_parent.p('dummy', 'link_parent');\n      instance_child.link(instance_parent);      \n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'link',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance_child.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_child.id, answer.child.id, 'Id from link event wrong');\n        t.same(instance_child.modelName, answer.child.modelName, 'Modelname from link event wrong');\n        t.same(instance_child.allProperties(), answer.child.properties, 'Properties from link event wrong');\n        \n        t.ok(instance_parent.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_parent.id, answer.parent.id, 'Id from link event wrong');\n        t.same(instance_parent.modelName, answer.parent.modelName, 'Modelname from link event wrong');\n        t.same(instance_parent.allProperties(), answer.parent.properties, 'Properties from link event wrong');\n        t.done();\n      });\n      \n      instance_child.save(error_callback(t));\n    },\n    \n    'unlink': function (t) {\n      t.expect(10);\n      var instance_child = nohm.factory('Tester');\n      var instance_parent = nohm.factory('Tester');\n      instance_child.p('dummy', 'unlink_child');\n      instance_parent.p('dummy', 'unlink_parent');\n      instance_child.link(instance_parent);\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'unlink',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance_child.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_child.id, answer.child.id, 'Id from unlink event wrong');\n        t.same(instance_child.modelName, answer.child.modelName, 'Modelname from unlink event wrong');\n        t.same(instance_child.allProperties(), answer.child.properties, 'Properties from unlink event wrong');\n        \n        t.ok(instance_parent.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_parent.id, answer.parent.id, 'Id from unlink event wrong');\n        t.same(instance_parent.modelName, answer.parent.modelName, 'Modelname from unlink event wrong');\n        t.same(instance_parent.allProperties(), answer.parent.properties, 'Properties from unlink event wrong');\n        t.done();\n      });\n      \n      instance_child.save(function (err) {\n        error_callback(t)(err);\n        instance_child.unlink(instance_parent);\n        instance_child.save(error_callback(t));\n      });\n    },\n    \n    'createOnce': function (t) {\n      // because testing a once event is a pain in the ass and really doesn't have many ways it can fail if the on method on the same event works, we only do on once test.\n      t.expect(7);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'create_once');\n      var once_done = 0;\n      \n      this.child.ask({\n        question: 'subscribeOnce',\n        args: {\n          event: 'create',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        once_done++;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from createOnce event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from createOnce event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from createOnce event wrong');\n        \n        var instance_inner = nohm.factory('Tester');\n        instance_inner.p('dummy', 'create_once_again');\n        instance_inner.save(error_callback(t));\n        \n        setTimeout(function () {\n          t.same(once_done, 1, 'subscribeOnce called the callback more than once.');\n          t.done();\n        }, 150); // this is fucked up :(\n      });\n      \n      instance.save(error_callback(t));\n    },\n    \n    'silenced': function (t) {\n      t.expect(6);\n      var self = this;\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'silenced');\n      var answered = false;\n      \n      var events = ['create', 'update', 'save', 'remove', 'link', 'unlink'];\n      \n      events.forEach(function (event) {\n        self.child.ask({\n          question: 'subscribe',\n          args: {\n            event: event,\n            modelName: 'Tester'\n          }\n        }, function (msg) {\n          if (msg.event === event) {\n            console.log(msg);\n            answered = true;\n          }\n        });\n      });\n      \n      instance.save({silent: true}, function (err) {\n        t.ok(!err, 'There was an error while saving silenced.');\n        instance.p('dummy', 'updated');\n        instance.save({silent: true}, function (err) {\n          t.ok(!err, 'There was an error while updating silenced.');\n          var second = nohm.factory('Tester');\n          instance.link(second);\n          instance.save({silent: true}, function (err) {\n            t.ok(!err, 'There was an error while linking silenced.');\n            instance.unlink(second);\n            instance.save({silent: true}, function (err) {\n              t.ok(!err, 'There was an error while unlinking silenced.');\n              instance.remove({silent: true}, function (err) {\n                t.ok(!err, 'There was an error while removing silenced.');\n                setTimeout(function () {\n                  t.same(answered, false, 'There was an event!');\n                  t.done();\n                }, 150);\n              });\n            });\n          });\n        });\n      });\n    }\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":13295}]],"length":13295}
{"contributors":[],"silentsave":false,"ts":1341349823390,"patch":[[{"diffs":[[0,"properly');\n"],[1,"      console.dir(nohm.getPubSubClient());\n"],[0,"      t.ok(n"]],"start1":1065,"start2":1065,"length1":24,"length2":67},{"diffs":[[0,"cription"],[-1,"s"],[1,"_set"],[0,", 'Secon"]],"start1":1158,"start2":1158,"length1":17,"length2":20}]],"length":13341,"saved":false}
{"ts":1341350009004,"patch":[[{"diffs":[[0,"');\n"],[-1,"      console.dir(nohm.getPubSubClient());\n"],[0,"    "]],"start1":1073,"start2":1073,"length1":51,"length2":8}]],"length":13298,"saved":false}
{"contributors":[],"silentsave":false,"ts":1342893296353,"patch":[[{"diffs":[[0,"properly');\n"],[1,"      console.dir(nohm.getPubSubClient());\n"],[0,"      t.ok(n"]],"start1":1065,"start2":1065,"length1":24,"length2":67},{"diffs":[[0,"tion"],[-1,"_set"],[1,"s"],[0,", 'S"]],"start1":1162,"start2":1162,"length1":12,"length2":9}]],"length":13338,"saved":false}
{"ts":1342893366169,"patch":[[{"diffs":[[0,"riptions"],[1,"subscription_set"],[0,", 'Secon"]],"start1":1159,"start2":1159,"length1":16,"length2":32}]],"length":13354,"saved":false}
{"ts":1342893367176,"patch":[[{"diffs":[[0,"tion"],[-1,"ssubscription"],[0,"_set"]],"start1":1162,"start2":1162,"length1":21,"length2":8}]],"length":13341,"saved":false}
{"ts":1342893375321,"patch":[[{"diffs":[[0,"');\n"],[-1,"      console.dir(nohm.getPubSubClient());\n"],[0,"    "]],"start1":1073,"start2":1073,"length1":51,"length2":8}]],"length":13298,"saved":false}
