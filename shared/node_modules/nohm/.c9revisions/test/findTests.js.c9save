{"ts":1354637649958,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var async = require('async');\nvar nohm = require(__dirname + '/../lib/nohm').Nohm;\nvar h = require(__dirname + '/helper.js');\nvar args = require(__dirname + '/testArgs.js');\nvar redis = args.redis;\n\nvar UserFindMockup = nohm.model('UserFindMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    },\n    email: {\n      type: 'string',\n      defaultValue: 'testMail@test.de',\n      unique: true\n    },\n    gender: {\n      type: 'string'\n    },\n    json: {\n      type: 'json',\n      defaultValue: '{}'\n    },\n    number: {\n      type: 'integer',\n      defaultValue: 1,\n      index: true\n    },\n    number2: {\n      type: 'integer',\n      defaultValue: 200,\n      index: true\n    },\n    bool: {\n      type: 'bool',\n      defaultValue: false\n    }\n  },\n  idGenerator: 'increment'\n});\n\nvar UserFindNoIncrementMockup = nohm.model('UserFindNoIncrementMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    },\n    number: {\n      type: 'integer',\n      defaultValue: 1,\n      index: true\n    }\n  }\n});\n\nnohm.model('UniqueIntegerFind', {\n  properties: {\n    unique: {\n      type: 'integer',\n      unique: true\n    }\n  }\n});\n\nvar errLogger = function(err) {\n  if (err) {\n    console.dir(err);\n  }\n};\n\nvar createUsers = function(props, modelName, callback) {\n  if (typeof(modelName) === 'function') {\n    callback = modelName;\n    modelName = 'UserFindMockup';\n  }\n  var makeSeries = function(prop) {\n    return function(next) {\n      var user = nohm.factory(modelName);\n      user.p(prop);\n      user.save(function (err) {\n        next(err, user);\n      });\n    };\n  };\n\n  var series = props.map(function(prop) {\n    return makeSeries(prop);\n  });\n\n  async.series(series, function(err, users) {\n    var ids = users.map(function (user) {\n      return user.id;\n    });\n    callback(users, ids);\n  });\n};\n\nexports.find = {\n  \n  setUp: function(next) {\n    if (!nohm.client) {\n      nohm.setClient(redis);\n    }\n    var t = this;\n    h.cleanUp(redis, args.prefix, function() {\n      createUsers([{\n        name: 'numericindextest',\n        email: 'numericindextest@hurgel.de',\n        gender: 'male',\n        number: 3\n      }, {\n        name: 'numericindextest',\n        email: 'numericindextest2@hurgel.de',\n        gender: 'male',\n        number: 4,\n        number2: 33\n      }, {\n        name: 'numericindextest',\n        email: 'numericindextest3@hurgel.de',\n        gender: 'female',\n        number: 4,\n        number2: 1\n      }, {\n        name: 'uniquefind',\n        email: 'uniquefind@hurgel.de'\n      }, {\n        name: 'indextest',\n        email: 'indextest@hurgel.de'\n      }, {\n        name: 'indextest',\n        email: 'indextest2@hurgel.de'\n      }, {\n        name: 'a_sort_first',\n        email: 'a_sort_first@hurgel.de',\n        number: 1\n      }, {\n        name: 'z_sort_last',\n        email: 'z_sort_last@hurgel.de',\n        number: 100000\n      }], function(users, ids) {\n        t.users = users;\n        t.userIds = ids;\n        next();\n      });\n    });\n  },\n  tearDown: function(next) {\n    h.cleanUp(redis, args.prefix, next);\n  },\n\n\n  loadInvalid: function(t) {\n    var user = new UserFindMockup();\n    t.expect(1);\n\n    h.cleanUp(redis, args.prefix, function () {\n      user.load(1, function(err) {\n        t.equals(err, 'not found', 'Load() did not return \"not found\" for id 1 even though there should not be a user yet.');\n        t.done();\n      });\n    });\n  },\n\n\n  load: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(5);\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n      json: {\n        test: 1\n      },\n      bool: 'true'\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      findUser.load(user.id, function(err) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.equals(user.p('name'), findUser.p('name'), 'The loaded version of the name was not the same as a set one.');\n        t.equals(user.p('email'), findUser.p('email'), 'The loaded version of the email was not the same as a set one.');\n        t.equals(findUser.p('json').test, 1, 'The loaded version of the json was not the same as the set one.');\n        t.equals(user.id, findUser.id, 'The loaded version of the email was not the same as a set one.');\n        t.equals(findUser.p('bool'), true, 'The loaded version of the boolean was not the same as a set one.');\n        t.done();\n      });\n    });\n  },\n\n\n  findAndLoad: function (t) {\n    var user = new UserFindMockup();\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      UserFindMockup.findAndLoad({name: \"hurgelwurz\"}, function(err, users) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n\n        t.equals(users.length, 1, 'The loaded number of users equals 1');\n        t.equals(user.p('name'), users[0].p('name'), 'The loaded version of the name was not the same as a set one.');\n        t.equals(user.p('email'), users[0].p('email'), 'The loaded version of the email was not the same as a set one.');\n        t.equals(user.id, users[0].id, 'The loaded version of the email was not the same as a set one.');\n        t.done();\n      });\n    });\n  },\n\n\n  findAll: function(t) {\n    var self = this;\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    findUser.find(function(err, ids) {\n      ids.sort(); // usually redis returns them first-in-first-out, but not always\n      t.same(self.userIds, ids, 'find() did not return all users when not given any search parameters.');\n      t.done();\n    });\n  },\n\n  exists: function(t) {\n    var existsUser = new UserFindMockup();\n    t.expect(2);\n\n\n    existsUser.exists(1, function(exists) {\n      t.equals(exists, true, 'Exists() did not return true for id 1.');\n\n      existsUser.exists(9999999, function(exists) {\n        t.equals(exists, false, 'Exists() did not return false for id 9999999.');\n        t.done();\n      });\n    });\n  },\n\n/* I don't know how to do this right now.\nloadArray: function (t) {\n  var findUser = new UserFindMockup();\n  t.expect(2);\n  \n  findUser.load(all, function (err, users) {\n    errLogger(err);\n    t.ok(Array.isArray(users), 'load()ing an array of ids did not return an array');\n    t.same(all.length, users.length, 'load()ing an array of ids did not return an array with the coorect length');\n  });\n},*/\n\n  findByInvalidSearch: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    console.log('There should be an error in the next line');\n    findUser.find({\n      gender: 'male'\n    }, function(err, ids) {\n      t.same(0, ids.length, 'Searching for a nonexistant index did not return an empty array.');\n      t.done();\n    });\n  },\n\n  findByUnique: function(t) {\n    var findUser = new UserFindMockup();\n    var userUnique = this.users.filter(function (user) {\n      return user.p('name') ==='uniquefind';\n    })[0];\n    t.expect(1);\n\n    findUser.find({\n      email: userUnique.p('email')\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [userUnique.id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByUniqueOtherCase: function(t) {\n    var findUser = new UserFindMockup();\n    var userUnique = this.users.filter(function (user) {\n      return user.p('name') ==='uniquefind';\n    })[0];\n    t.expect(1);\n\n    findUser.find({\n      email: userUnique.p('email').toUpperCase()\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [userUnique.id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByUniqueInvalidSearch: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    console.log('There should be an error in the next line');\n    findUser.find({\n      email: {}\n    }, function(err) {\n      t.same(0, err.indexOf('Invalid search parameters'), 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n  \n  findByIntegerUnique: function(t) {\n    var saveObj = nohm.factory('UniqueIntegerFind');\n    var findObj = nohm.factory('UniqueIntegerFind');\n    t.expect(3);\n    \n    saveObj.p('unique', 123);\n    saveObj.save(function (err) {\n      t.ok(!err, 'Unexpected saving error');\n\n      findObj.find({\n        unique: saveObj.p('unique')\n      }, function(err, ids) {\n        t.ok(!err, 'Unexpected finding error');\n        t.same(ids, [saveObj.id], 'The found id did not match the id of the saved object.');\n        t.done();\n      });\n    });\n  },\n\n  findByStringIndex: function(t) {\n    var findUser = new UserFindMockup();\n    var users = this.users.filter(function (user) {\n      return user.p('name') ==='indextest';\n    });\n    t.expect(1);\n\n    findUser.find({\n      name: 'indextest'\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [users[0].id, users[1].id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByNumericIndex: function(t) {\n    var findUser = new UserFindMockup();\n    var users = this.users.filter(function (user) {\n      return user.p('number') > 2 && user.p('number2') < 100;\n    });\n    t.expect(1);\n\n    findUser.find({\n      number: {\n        min: 2\n      },\n      number2: {\n        max: 100,\n        limit: 2\n      }\n    }, function(err, ids) {\n      errLogger(err);\n      t.same(ids.sort(), [users[0].id, users[1].id].sort(), 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByMixedIndex: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    createUsers([{\n      name: 'mixedindextest',\n      email: 'mixedindextest@hurgel.de',\n      number: 3,\n      number2: 33\n    }, {\n      name: 'mixedindextest',\n      email: 'mixedindextest2@hurgel.de',\n      number: 4,\n      number2: 33\n    }, {\n      name: 'mixedindextestNOT',\n      email: 'mixedindextest3@hurgel.de',\n      number: 4,\n      number2: 1\n    }, {\n      name: 'mixedindextest',\n      email: 'mixedindextest4@hurgel.de',\n      number: 1,\n      number2: 33\n    }], function (users, inserted_ids) {\n\n      findUser.find({\n        number: {\n          min: 2\n        },\n        number2: {\n          max: 100\n        },\n        name: 'mixedindextest'\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        t.same(ids.sort(), [users[0].id, users[1].id].sort(), 'The found id did not match the id of the saved object.');\n        t.done();\n      });\n    });\n  },\n\n  findSameNumericTwice: function(t) {\n    var self = this;\n    var findUser = new UserFindMockup();\n    t.expect(2);\n\n\n    createUsers([{\n      name: 'SameNumericTwice',\n      email: 'SameNumericTwice@hurgel.de',\n      number: 3000\n    }, {\n      name: 'SameNumericTwice2',\n      email: 'SameNumericTwice2@hurgel.de',\n      number: 3000\n    }], function (users, userIds) {\n      findUser.find({\n        number: {\n          min: 3000\n        }\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        userIds.push(self.userIds[self.userIds.length-1]);\n        t.same(userIds.length, 3, 'Didn\\'t create 2 users, instead: '+userIds.length);\n        t.same(ids.sort(), userIds.sort(), 'The found id did not match the id of the saved objects.');\n        t.done();\n      });\n    });\n  },\n\n  findByMixedIndexMissing: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n    \n    createUsers([{\n      name: 'mixedindextestMissing',\n      email: 'mixedindextestMissing@hurgel.de',\n      number: 4\n    }, {\n      name: 'mixedindextestMissing2',\n      email: 'mixedindextestMissing2@hurgel.de',\n      number: 4\n    }], function () {\n      findUser.find({\n        number: {\n          min: 2\n        },\n        name: 'mixedindextASDASDestMISSING'\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        t.same(ids, [], 'Ids were found even though the name should not be findable.');\n        t.done();\n      });\n    });\n  },\n\n\n  findNumericWithoutLimit: function(t) {\n    var findUser = new UserFindMockup(),\n        usersLooped = 0,\n        loopUserCreation = function() {\n        usersLooped++;\n        if (usersLooped === 55) {\n          findUser.find({\n            number: {\n              min: 1,\n              limit: 0\n            }\n          }, function(err, ids) {\n            errLogger(err);\n            t.ok(ids.length > 54, 'The limit: 0 option did not return more than 50 ids.');\n            t.done();\n          });\n        }\n        };\n    t.expect(1);\n\n    for (var i = 0, len = 55; i < len; i++) {\n      var user = new UserFindMockup();\n      user.p({\n        name: 'findNumericWithoutLimit' + i,\n        email: 'findNumericWithoutLimit' + i + '@hurgel.de',\n        number: i\n      });\n\n      user.save(loopUserCreation);\n    }\n  },\n\n  findExactNumeric: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup(),\n        num = 999876543;\n    t.expect(2);\n\n    user.p({\n      name: 'findExactNumeric',\n      email: 'findExactNumeric@hurgel.de',\n      number: num\n    });\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n      }\n      findUser.find({\n        number: num\n      }, function(err, ids) {\n        t.same(ids, [user.id], 'Did not find an exact number match');\n        findUser.find({\n          number: (num - 1)\n        }, function(err, ids) {\n          t.same(ids, [], 'Searching for a nonexistant number did not return an empty array.');\n          t.done();\n        });\n      });\n    });\n  },\n\n  loadReturnsProps: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(1);\n\n    user.p({\n      name: 'loadReturnsProps',\n      email: 'loadReturnsProps@hurgel.de',\n      json: {\n        test: 1\n      }\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      findUser.load(user.id, function(err, props) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        var testProps = user.allProperties();\n        delete testProps.id;\n        t.same(props, testProps, 'The loaded properties are not the same as allProperties() (without id).');\n        t.done();\n      });\n    });\n  },\n\n  shortForms: function(t) {\n    t.expect(11);\n    var shortFormMockup = nohm.model('shortFormMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'testName',\n          index: true,\n          validations: [\n            'notEmpty'\n            ]\n        }\n      },\n      idGenerator: 'increment'\n    });\n\n    shortFormMockup.save(function(err) {\n      var id = this.id;\n      t.ok(!err, 'There was an error while saving');\n      t.ok(this instanceof shortFormMockup, '´this´ was not set to an instance of UserFindMockup');\n      t.ok(id > 0, 'The id was not set properly');\n      this.p('name', 'shortForm');\n      this.save(function() {\n        this.p('name', 'asdasd'); // make sure our comparisons in load aren't bogus\n        shortFormMockup.load(id, function(err, props) {\n          t.ok(!err, 'There was an error while loading.');\n          t.ok(props.hasOwnProperty('name') && props.name === 'shortForm', 'The props argument was not properly passed in load.');\n          t.same(this.p('name'), 'shortForm', 'The `this` instance has some property issues.');\n          shortFormMockup.find({\n            name: 'shortForm'\n          }, function(err, ids) {\n            t.ok(!err, 'There was an error while finding');\n            t.same(ids, [id], 'The found ids do not match [id]');\n            shortFormMockup.remove(id, function(err) {\n              t.ok(!err, 'There was an error while removing');\n              shortFormMockup.find({\n                name: 'shortForm'\n              }, function(err, ids) {\n                t.ok(!err, 'There was en error while finding the second time');\n                t.same(ids, [], 'Remove did not remove the correct instance. Uh-Oh.... :D ');\n                t.done();\n              });\n            });\n          });\n        });\n      });\n    });\n  },\n\n  uuidLoadFind: function(t) {\n    t.expect(6);\n    var uuidMockup = nohm.model('uuidMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'testName',\n          index: true,\n          validations: [\n            'notEmpty'\n            ]\n        }\n      }\n    });\n\n    var test = new uuidMockup();\n    test.p('name', 'uuid');\n\n    var test2 = new uuidMockup();\n    test2.p('name', 'uuid2');\n\n    test.save(function() {\n      t.ok(test.id.length > 0, 'There was no proper id generated');\n      test2.save(function() {\n        t.ok(test.id !== test2.id, 'The uuids were the same.... ');\n        var loader = new uuidMockup();\n        loader.load(test.id, function(err, props) {\n          t.ok(!err, 'There was an error while loading');\n          t.same(props.name, test.p('name'), 'The loaded properties were not correct.');\n          uuidMockup.find({\n            name: test.p('name')\n          }, function(err, ids) {\n            t.ok(!err, 'There was an error while finding.');\n            t.same([test.id], ids, 'Did not find the correct ids');\n            t.done();\n          });\n        });\n      });\n    });\n  },\n  \n  \"normal string IDs\": {\n    setUp: function (next) {\n      var self = this;\n      createUsers([{ \n      }, {\n        name: 'blablub'\n      }], 'UserFindNoIncrementMockup', function (users, ids) {\n        self.users = users;\n        self.userIds = ids;\n        next();\n      });\n    },\n    tearDown: function (next) {\n      h.cleanUp(redis, args.prefix, next);\n    },\n    \n    find: function (t) {\n      t.expect(2);\n      var self = this;\n      \n      UserFindNoIncrementMockup.find({\n        name: 'blablub'\n      }, function (err, ids) {\n        t.same(ids.length, 1, 'Did not find the correct number of ids for non-incremental id model.');\n        t.same(ids[0], self.userIds[1], 'Did not find the correct id for non-incremental id model.');\n        t.done();\n      });\n    },\n  \n    \"load via constructor\": function (t) {\n      t.expect(2);\n      var self = this;\n      \n      var test = new UserFindNoIncrementMockup(this.userIds[0], function (err) {\n        t.ok(!err, 'There was an error while loading a model via constructor.');\n        t.same(test.allProperties(), self.users[0].allProperties(), 'A loaded user did not match what should\\'ve been saved.');\n        t.done();\n      });\n    }\n  },\n  \n  \"search unique that doesn't exists\": function (t) {\n    t.expect(2);\n    var test = nohm.factory('UserFindMockup');\n    test.find({\n      email: 'this_user_email_should_absolutely_not_exist. it\\'s not even a valid email...'\n    }, function (err, ids) {\n      t.ok(!err, 'There was an error while searching an inexistant unique value.');\n      t.same([], ids, 'The return of a search that didn\\'t find anything was wrong.');\n      t.done();\n    })\n  },\n  \n  \"load via constructor\": function (t) {\n    t.expect(3);\n    var test = nohm.factory('UserFindMockup');\n    test.save(function (err) {\n      t.ok(!err, 'There was an error while saving.');\n      \n      var test2 = new UserFindMockup(test.id, function (err) {\n        t.ok(!err, 'There was an error while loading a model via constructor.');\n        t.same(test2.allProperties(), test.allProperties(), 'The return of a search that didn\\'t find anything was wrong.');\n        t.done();\n      });\n    })\n  },\n  \n  sort: {\n    \n    \"all by name\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by name DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a < b ? 1 : (a > b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name',\n        direction: 'DESC'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by name LIMIT 2, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(2, 5)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'name',\n        limit: [2,3]\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        var id_sort = a.id < b.id ? 1 : -1;\n        a = a.p('number');\n        b = b.p('number');\n        return a < b ? 1 : (a > b ? -1 : id_sort);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        direction: 'DESC'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number LIMIT 3, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(3, 6)\n      .map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        limit: [3,3]\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \"provided by name\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by name DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a < b ? 1 : (a > b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name',\n        direction: 'DESC'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by name LIMIT 2, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(2, 5)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'name',\n        limit: [2,3]\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        var id_sort = a.id < b.id ? 1 : -1;\n        a = a.p('number');\n        b = b.p('number');\n        return a < b ? 1 : (a > b ? -1 : id_sort);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        direction: 'DESC'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number LIMIT 3, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(3, 6)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'number',\n        limit: [3,3]\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    }\n  },\n\n  \"load hash with extra properties\": function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(7);\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n      json: {\n        test: 1\n      }\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      redis.hset(nohm.prefix.hash+findUser.modelName+':'+user.id, 'not_a_real_property', 'something... :-)', function (err) {\n        t.ok(!err, 'Unexpected redis error in custom query');\n        console.log('There should be an error in the next line');\n        findUser.load(user.id, function(err) {\n          t.ok(!err, 'Unexpected load error');\n          t.equals(user.p('name'), findUser.p('name'), 'The loaded version of the name was not the same as a set one.');\n          t.equals(user.p('email'), findUser.p('email'), 'The loaded version of the email was not the same as a set one.');\n          t.equals(findUser.p('json').test, 1, 'The loaded version of the json was not the same as the set one.');\n          t.equals(user.id, findUser.id, 'The loaded version of the email was not the same as a set one.');\n          t.equals(user.p('bool'), false, 'The loaded version of the boolean was not the same as a set one.');\n          t.done();\n        });\n      });\n    });\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":28145}]],"length":28145}
{"contributors":[],"silentsave":false,"ts":1354639902921,"patch":[[{"diffs":[[0,"ockup();"],[1,"\n    var user2 = new UserFindMockup();"],[0,"\n\n    us"]],"start1":4755,"start2":4755,"length1":16,"length2":54},{"diffs":[[0,"e',\n    });\n"],[-1,"\n    user.save("],[1,"    user2.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz2@hurgel.de',\n    });\n\n    async.parallel([\n      function (done) {\n        user.save(done);\n      },\n      function (done) {\n        user2.save(done);\n      }\n    ], "],[0,"function(err"]],"start1":4875,"start2":4875,"length1":39,"length2":255}]],"length":28399,"saved":false}
{"ts":1354639907899,"patch":[[{"diffs":[[0,"length, "],[-1,"1"],[1,"2"],[0,", 'The l"]],"start1":5382,"start2":5382,"length1":17,"length2":17}]],"length":28399,"saved":false}
{"ts":1354639921579,"patch":[[{"diffs":[[0,"ers "],[-1,"equals 1"],[1,"was not 2."],[0,"');\n"]],"start1":5417,"start2":5417,"length1":16,"length2":18}]],"length":28401,"saved":false}
{"ts":1354639961769,"patch":[[{"diffs":[[0,"      }\n"],[1,"        console.log(users[1].p('email'));"],[0,"\n       "]],"start1":5350,"start2":5350,"length1":16,"length2":57}]],"length":28442,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354640334591,"patch":[[{"diffs":[[0,"ser2.save(done);"],[1,"aa"],[0,"\n      }\n    ], "]],"start1":5086,"start2":5086,"length1":32,"length2":34}]],"length":28444,"saved":false}
{"ts":1354640336358,"patch":[[{"diffs":[[0,"ne);"],[-1,"aa"],[0,"\n   "]],"start1":5098,"start2":5098,"length1":10,"length2":8}]],"length":28442,"saved":false}
