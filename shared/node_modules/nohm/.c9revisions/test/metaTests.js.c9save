{"ts":1342144854312,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var async = require('async');\nvar nohm = require(__dirname + '/../lib/nohm').Nohm;\nvar h = require(__dirname + '/helper.js');\nvar args = require(__dirname + '/testArgs.js');\nvar redis = args.redis;\nvar crypto = require('crypto');\n\nvar prefix = args.prefix;\n\nnohm.model('UserMetaMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    },\n    email: {\n      type: 'string',\n      defaultValue: 'testMail@test.de',\n      unique: true,\n      validations: [\n        'email',\n        function (vals, old, cb) {\n          cb(vals !== 'thisisnoemail');\n        }\n      ]\n    },\n    gender: {\n      type: 'string'\n    },\n    json: {\n      type: 'json',\n      defaultValue: '{}'\n    },\n    number: {\n      type: 'integer',\n      defaultValue: 1,\n      index: true\n    },\n    bool: {\n      type: 'bool',\n      defaultValue: false\n    }\n  },\n  idGenerator: 'increment'\n});\n\nnohm.model('CommentMetaMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    }\n  },\n  idGenerator: function (cb) {\n    return cb(+new Date());\n  }\n});\n\nvar errLogger = function(err) {\n  if (err) {\n    console.dir(err);\n  }\n};\n\nvar createUsers = function(props, modelName, callback) {\n  if (typeof(modelName) === 'function') {\n    callback = modelName;\n    modelName = 'UserMetaMockup';\n  }\n  var makeSeries = function(prop) {\n    return function(next) {\n      var user = nohm.factory(modelName);\n      user.p(prop);\n      user.save(function (err) {\n        next(err, user);\n      });\n    };\n  };\n\n  var series = props.map(function(prop) {\n    return makeSeries(prop);\n  });\n\n  async.series(series, function(err, users) {\n    var ids = users.map(function (user) {\n      return user.id;\n    });\n    callback(users, ids);\n  });\n};\n\nvar users_created = false;\n\nexports.meta = {\n  \n  setUp: function(next) {\n    if (!nohm.client) {\n      nohm.setClient(redis);\n    }\n    var t = this;\n    \n    if ( ! users_created) {\n      createUsers([{\n        name: 'metatestsone',\n        email: 'metatestsone@hurgel.de',\n        gender: 'male',\n        number: 3\n      }, {\n        name: 'metateststwo',\n        email: 'numericindextest2@hurgel.de',\n        gender: 'male',\n        number: 4\n      }], function(users, ids) {\n        var comment = nohm.factory('CommentMetaMockup');\n        users_created = true;\n        users[0].link(comment);\n        users[0].save(function () {\n          t.users = users;\n          t.userIds = ids;\n          next();\n        });\n      });\n    } else {\n      next();\n    }\n  },\n\n  version: function(t) {\n    var user = nohm.factory('UserMetaMockup');\n    t.expect(1);\n    \n    var hash = crypto.createHash('sha1');\n    \n    hash.update(JSON.stringify(user.meta.properties));\n    hash.update(JSON.stringify(user.modelName));\n    hash.update(user.idGenerator.toString());\n    \n    redis.get(prefix+':meta:version:UserMetaMockup', function (err, version) {\n      errLogger(err);\n      t.same(hash.digest('hex'), version, 'Version of the metadata did not match.');\n      t.done();\n    });\n  },\n\n  \"version in instance\": function(t) {\n    var user = nohm.factory('UserMetaMockup');\n    t.expect(1);\n    \n    redis.hget(prefix+':hash:UserMetaMockup:1', '__meta_version', function (err, version) {\n      errLogger(err);\n      t.same(user.meta.version, version, 'Version of the instance did not match metaData.');\n      t.done();\n    });\n  },\n\n  idGenerator: function(t) {\n    var user = nohm.factory('UserMetaMockup');\n    var comment = nohm.factory('CommentMetaMockup');\n    t.expect(2);\n    \n    async.parallel([\n      function (next) {\n        redis.get(prefix+':meta:idGenerator:UserMetaMockup', function (err, generator) {\n          errLogger(err);\n          t.same(user.idGenerator.toString(), generator, 'idGenerator of the user did not match.');\n          next();\n        });\n      },\n      function (next) {\n        redis.get(prefix+':meta:idGenerator:CommentMetaMockup', function (err, generator)  {\n          errLogger(err);\n          t.same(comment.idGenerator.toString(), generator, 'idGenerator of the comment did not match.');\n          next();\n        });\n      }\n    ], t.done);\n  },\n\n  properties: function(t) {\n    var user = nohm.factory('UserMetaMockup');\n    var comment = nohm.factory('CommentMetaMockup');\n    t.expect(2);\n    \n    async.parallel([\n      function (next) {\n        redis.get(prefix+':meta:properties:UserMetaMockup', function (err, properties) {\n          errLogger(err);\n          t.same(JSON.stringify(user.meta.properties), properties, 'Properties of the user did not match.');\n          next();\n        });\n      },\n      function (next) {\n        redis.get(prefix+':meta:properties:CommentMetaMockup', function (err, properties)  {\n          errLogger(err);\n          t.same(JSON.stringify(comment.meta.properties), properties, 'Properties of the comment did not match.');\n          next();\n        });\n      }\n    ], t.done);\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":5074}]],"length":5074}
{"contributors":[],"silentsave":false,"ts":1342144968414,"patch":[[{"diffs":[[0,"rypto');"],[1,"\nvar traverse = require('traverse');"],[0,"\n\nvar pr"]],"start1":221,"start2":221,"length1":16,"length2":52},{"diffs":[[0,"false;\n\n"],[1,"var stringify = function (obj) {\n  return traverse(obj).map(function (x) { \n    if (typeof x === 'function') {\n      return String(x) \n    } else {\n      return x;\n    }\n  });\n}\n\n"],[0,"exports."]],"start1":1969,"start2":1969,"length1":16,"length2":195},{"diffs":[[0,"         t.same("],[-1,"JSON."],[0,"stringify(user.m"]],"start1":4823,"start2":4823,"length1":37,"length2":32},{"diffs":[[0," t.same("],[-1,"JSON."],[0,"stringif"]],"start1":5117,"start2":5117,"length1":21,"length2":16}]],"length":5279,"saved":false}
{"ts":1342145035073,"patch":[[{"diffs":[[0,"tringify"],[1,"_functions"],[0," = funct"]],"start1":1982,"start2":1982,"length1":16,"length2":26},{"diffs":[[0,"         t.same("],[1,"JSON."],[0,"stringify(user.m"]],"start1":4833,"start2":4833,"length1":32,"length2":37},{"diffs":[[0,"(JSON.stringify("],[1,"stringify_functions("],[0,"user.meta.proper"]],"start1":4848,"start2":4848,"length1":32,"length2":52},{"diffs":[[0,"meta.properties)"],[1,")"],[0,", properties, 'P"]],"start1":4889,"start2":4889,"length1":32,"length2":33},{"diffs":[[0," t.same("],[1,"JSON."],[0,"stringif"]],"start1":5153,"start2":5153,"length1":16,"length2":21},{"diffs":[[0,"ringify("],[1,"stringify_functions("],[0,"comment."]],"start1":5168,"start2":5168,"length1":16,"length2":36},{"diffs":[[0,"perties)"],[1,")"],[0,", proper"]],"start1":5212,"start2":5212,"length1":16,"length2":17}]],"length":5341,"saved":false}
