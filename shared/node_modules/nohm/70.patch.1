From 32b10ff4d665329bb2ffc9e7d01e0e283d86d89a Mon Sep 17 00:00:00 2001
From: Michal Kuklis <michal.kuklis@gmail.com>
Date: Mon, 8 Oct 2012 00:19:10 -0400
Subject: [PATCH 1/5] added 'findAndLoad'

---
 lib/nohm.js     |   44 ++++++++++++++++++++++----------------------
 lib/retrieve.js |   42 +++++++++++++++++++++++++++++-------------
 2 files changed, 51 insertions(+), 35 deletions(-)

diff --git a/lib/nohm.js b/lib/nohm.js
index 70d17ec..108a423 100644
--- a/lib/nohm.js
+++ b/lib/nohm.js
@@ -54,7 +54,7 @@ Nohm.model = function (name, options, temp) {
   if ( ! name ) {
     this.logError('When creating a new model you have to provide a name!');
   }
-  
+
   var obj = function (id, cb) {
     this.init(options);
     // if this is changed, check if the factory needs to be changed as well!
@@ -63,21 +63,21 @@ Nohm.model = function (name, options, temp) {
     }
   };
   obj.prototype = new Nohm();
-  
+
   obj.prototype.modelName = name;
 
   obj.prototype.idGenerator = options.idGenerator || 'default';
-  
+
   var meta = {
     inDb: false
   };
   meta.properties = options.properties;
   meta.version = _meta_version(meta.properties, obj);
-  
+
   obj.prototype.meta = meta;
-  
+
   // this creates a few functions for short-form like: SomeModel.load(1, function (err, props) { /* `this` is someModelInstance here */ });
-  var shortFormFuncs = ['load', 'find', 'save', 'sort', 'subscribe', 'subscribeOnce', 'unsubscribe'];
+  var shortFormFuncs = ['load', 'find', 'findAndLoad', 'save', 'sort', 'subscribe', 'subscribeOnce', 'unsubscribe'];
   shortFormFuncs.forEach(function (val) {
     obj[val] = function () {
       var instance = new obj();
@@ -101,17 +101,17 @@ Nohm.model = function (name, options, temp) {
 
 var _meta_version = function (properties, obj) {
   var hash = crypto.createHash('sha1');
-  
+
   hash.update(JSON.stringify(properties));
   hash.update(JSON.stringify(obj.prototype.modelName));
   hash.update(obj.prototype.idGenerator.toString());
-  
+
   return hash.digest('hex');
 };
 
 /**
  * Factory to produce instances of models
- * 
+ *
  * @param {String} name Name of the model (as given to Nohm.model())
  * @param {Number} [id] Id to be loaded. This requires the callback.
  * @param {Function} [callback] Called when the user is loaded from the db.
@@ -133,7 +133,7 @@ Nohm.factory = function factory(name, id, callback) {
 
 /**
  * Gets all registered models.
- * 
+ *
  * @returns {Object} Object containing all registered models
  * @static
  */
@@ -240,7 +240,7 @@ Nohm.prototype.init = function (options) {
     Nohm.logError('Did not find a viable redis client in Nohm or the model: '+this.modelName);
     return false;
   }
-  
+
   if ( ! this.meta.inDb) {
     __updateMeta.call(this);
   }
@@ -254,7 +254,7 @@ Nohm.prototype.init = function (options) {
 
   // initialize the properties
   if (options.hasOwnProperty('properties')) {
-    
+
     for (var p in options.properties) {
       if (options.properties.hasOwnProperty(p)) {
         this.properties[p] = h.$extend(true, {}, options.properties[p]); // deep copy
@@ -273,7 +273,7 @@ Nohm.prototype.init = function (options) {
       }
     }
   }
-  
+
   if (options.hasOwnProperty('methods')) {
     addMethods.call(this, options.methods);
   }
@@ -296,18 +296,18 @@ var __updateMeta = function () {
     return false;
   }
   var self = this;
-  
+
   var version_key = Nohm.prefix.meta.version + this.modelName;
   var idGenerator_key = Nohm.prefix.meta.idGenerator + this.modelName;
   var properties_key = Nohm.prefix.meta.properties + this.modelName;
-  var properties = traverse(self.meta.properties).map(function (x) { 
+  var properties = traverse(self.meta.properties).map(function (x) {
     if (typeof x === 'function') {
-      return String(x) 
+      return String(x)
     } else {
       return x;
     }
   });
-  
+
   this.getClient().get(version_key, function (err, db_version) {
     if (err) {
       Nohm.logError(err);
@@ -335,11 +335,11 @@ var __updateMeta = function () {
 
 /**
  * DO NOT USE THIS UNLESS YOU ARE ABSOLUTELY SURE ABOUT IT!
- * 
+ *
  * Deletes any keys from the db that start with nohm prefixes.
- * 
+ *
  * DO NOT USE THIS UNLESS YOU ARE ABSOLUTELY SURE ABOUT IT!
- * 
+ *
  * @param {Object} [redis] You can specify the redis client to use. Default: Nohm.client
  * @param {Function} [callback] Called after all keys are deleted.
  */
@@ -357,11 +357,11 @@ Nohm.purgeDb = function (redis, callback) {
     });
   };
   var deletes = [];
-  
+
   Object.keys(Nohm.prefix).forEach(function (key) {
     deletes.push(async.apply(delKeys, Nohm.prefix[key]));
   });
-  
+
   async.series(deletes, function (err) {
     callback(err);
   });
diff --git a/lib/retrieve.js b/lib/retrieve.js
index c85662c..dbadf28 100644
--- a/lib/retrieve.js
+++ b/lib/retrieve.js
@@ -70,6 +70,22 @@ exports.load = function (id, callback) {
   });
 };
 
+/**
+ * Finds ids of objects and loads them.
+ */
+exports.findAndLoad = function findAndLoad(searches, callback) {
+  var self = this;
+  this.find(searches, function (err, ids) {
+    if (err) callback(err, ids);
+    if (ids.length > 0) {
+      async.map(ids, function (id, callback) {
+        self.load(id, function (err, props) {
+          callback(err, this.allProperties());
+        });
+      }, callback);
+    }
+  });
+};
 
 /**
  * Finds ids of objects by search arguments
@@ -127,8 +143,8 @@ exports.find = function find(searches, callback) {
       callback(err, ids);
     });
   };
-  
-  
+
+
   if (typeof searches === 'function') {
     callback = searches;
     searches = {};
@@ -186,18 +202,18 @@ exports.sort = function (options, ids) {
     ids = false;
   }
   options = typeof(options) !== 'function' && typeof(options) === 'object' && Object.keys(options).length > 0 ? options : {};
-  
+
   if (ids.length > 0 && options === {}) {
     return callback(ids.sort());
   }
-  
+
   if ( ! options.field || ! this.properties.hasOwnProperty(options.field)) {
     callback('invalid field in options', ids);
     return Nohm.logError('Invalid field in sort() options: ' + options.field);
   }
-  
+
   var field_type = this.properties[options.field].type;
-  
+
   var alpha = options.alpha ||  field_type === 'string' ? 'ALPHA' : '';
   var direction = options.direction ? options.direction : 'ASC';
   var scored = Nohm.indexNumberTypes.indexOf(field_type) !== -1;
@@ -218,13 +234,13 @@ exports.sort = function (options, ids) {
   var zset_key = Nohm.prefix.scoredindex+this.modelName+':'+options.field;
   var client = this.getClient();
   var tmp_key;
-  
+
   if (ids) {
     // to get the intersection of the given ids and all ids on the server we first
     // temporarily store the given ids either in a set or sorted set and then return the intersection
-    
-    client = client.multi(); 
-    
+
+    client = client.multi();
+
     if (scored) {
       tmp_key = zset_key+':tmp_sort:'+(+ new Date()) + Math.ceil(Math.random()*1000);
       var tmp_zadd_args = [tmp_key];
@@ -249,14 +265,14 @@ exports.sort = function (options, ids) {
   }
   if (ids) {
     client.del(tmp_key);
-    client.exec(Nohm.logError);    
+    client.exec(Nohm.logError);
   }
 };
 
 var sortNormal = function (client, idset_key, field, alpha, direction, start, stop, callback) {
   var hash_key = Nohm.prefix.hash+this.modelName;
-  client.sort([idset_key, 
-    'BY', hash_key+':*->'+field, 
+  client.sort([idset_key,
+    'BY', hash_key+':*->'+field,
     'LIMIT', start, stop,
     direction,
     alpha],
-- 
1.7.10


From b1fd77363adc0f351c43cdc7c87be7a116e09b73 Mon Sep 17 00:00:00 2001
From: Michal Kuklis <michal.kuklis@gmail.com>
Date: Mon, 8 Oct 2012 00:33:19 -0400
Subject: [PATCH 2/5] added test for findAndLoad

---
 test/findTests.js |  134 ++++++++++++++++++++++++++++++++---------------------
 1 file changed, 81 insertions(+), 53 deletions(-)

diff --git a/test/findTests.js b/test/findTests.js
index 8256659..998963f 100644
--- a/test/findTests.js
+++ b/test/findTests.js
@@ -105,7 +105,7 @@ var createUsers = function(props, modelName, callback) {
 };
 
 exports.find = {
-  
+
   setUp: function(next) {
     if (!nohm.client) {
       nohm.setClient(redis);
@@ -205,6 +205,34 @@ exports.find = {
     });
   },
 
+  findAndLoad: function (t) {
+    var user = new UserFindMockup();
+
+    user.p({
+      name: 'hurgelwurz',
+      email: 'hurgelwurz@hurgel.de',
+    });
+
+    user.save(function(err) {
+      if (err) {
+        console.dir(err);
+        t.done();
+      }
+      UserFindMockup.findAndLoad({name: "hurgelwurz"}, function(err, users) {
+        if (err) {
+          console.dir(err);
+          t.done();
+        }
+
+        t.equals(users.length, 1, 'The loaded number of users equals 1');
+        t.equals(user.p('name'), users[0].name, 'The loaded version of the name was not the same as a set one.');
+        t.equals(user.p('email'), users[0].email, 'The loaded version of the email was not the same as a set one.');
+        t.equals(user.id, users[0].id, 'The loaded version of the email was not the same as a set one.');
+        t.done();
+      });
+    });
+  },
+
   findAll: function(t) {
     var self = this;
     var findUser = new UserFindMockup();
@@ -236,7 +264,7 @@ exports.find = {
 loadArray: function (t) {
   var findUser = new UserFindMockup();
   t.expect(2);
-  
+
   findUser.load(all, function (err, users) {
     errLogger(err);
     t.ok(Array.isArray(users), 'load()ing an array of ids did not return an array');
@@ -305,12 +333,12 @@ loadArray: function (t) {
       t.done();
     });
   },
-  
+
   findByIntegerUnique: function(t) {
     var saveObj = nohm.factory('UniqueIntegerFind');
     var findObj = nohm.factory('UniqueIntegerFind');
     t.expect(3);
-    
+
     saveObj.p('unique', 123);
     saveObj.save(function (err) {
       t.ok(!err, 'Unexpected saving error');
@@ -443,7 +471,7 @@ loadArray: function (t) {
   findByMixedIndexMissing: function(t) {
     var findUser = new UserFindMockup();
     t.expect(1);
-    
+
     createUsers([{
       name: 'mixedindextestMissing',
       email: 'mixedindextestMissing@hurgel.de',
@@ -650,11 +678,11 @@ loadArray: function (t) {
       });
     });
   },
-  
+
   "normal string IDs": {
     setUp: function (next) {
       var self = this;
-      createUsers([{ 
+      createUsers([{
       }, {
         name: 'blablub'
       }], 'UserFindNoIncrementMockup', function (users, ids) {
@@ -666,11 +694,11 @@ loadArray: function (t) {
     tearDown: function (next) {
       h.cleanUp(redis, args.prefix, next);
     },
-    
+
     find: function (t) {
       t.expect(2);
       var self = this;
-      
+
       UserFindNoIncrementMockup.find({
         name: 'blablub'
       }, function (err, ids) {
@@ -679,11 +707,11 @@ loadArray: function (t) {
         t.done();
       });
     },
-  
+
     "load via constructor": function (t) {
       t.expect(2);
       var self = this;
-      
+
       var test = new UserFindNoIncrementMockup(this.userIds[0], function (err) {
         t.ok(!err, 'There was an error while loading a model via constructor.');
         t.same(test.allProperties(), self.users[0].allProperties(), 'A loaded user did not match what should\'ve been saved.');
@@ -691,7 +719,7 @@ loadArray: function (t) {
       });
     }
   },
-  
+
   "search unique that doesn't exists": function (t) {
     t.expect(2);
     var test = nohm.factory('UserFindMockup');
@@ -703,13 +731,13 @@ loadArray: function (t) {
       t.done();
     })
   },
-  
+
   "load via constructor": function (t) {
     t.expect(3);
     var test = nohm.factory('UserFindMockup');
     test.save(function (err) {
       t.ok(!err, 'There was an error while saving.');
-      
+
       var test2 = new UserFindMockup(test.id, function (err) {
         t.ok(!err, 'There was an error while loading a model via constructor.');
         t.same(test2.allProperties(), test.allProperties(), 'The return of a search that didn\'t find anything was wrong.');
@@ -717,12 +745,12 @@ loadArray: function (t) {
       });
     })
   },
-  
+
   sort: {
-    
+
     "all by name": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -730,7 +758,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'name'
       }, function (err, ids) {
@@ -739,10 +767,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "all by name DESC": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -750,7 +778,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'name',
         direction: 'DESC'
@@ -760,10 +788,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "all by name LIMIT 2, 3": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -771,8 +799,8 @@ loadArray: function (t) {
       }).slice(2, 5)
       .map(function (user) {
         return ''+user.id;
-      });      
-      
+      });
+
       UserFindMockup.sort({
         field: 'name',
         limit: [2,3]
@@ -782,10 +810,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "all by number": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -793,7 +821,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'number'
       }, function (err, ids) {
@@ -802,10 +830,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "all by number DESC": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         var id_sort = a.id < b.id ? 1 : -1;
         a = a.p('number');
@@ -814,7 +842,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'number',
         direction: 'DESC'
@@ -824,10 +852,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "all by number LIMIT 3, 3": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -836,7 +864,7 @@ loadArray: function (t) {
       .map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'number',
         limit: [3,3]
@@ -848,7 +876,7 @@ loadArray: function (t) {
     },
     "provided by name": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -856,7 +884,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'name'
       }, this.userIds, function (err, ids) {
@@ -865,10 +893,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "provided by name DESC": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -876,7 +904,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'name',
         direction: 'DESC'
@@ -886,10 +914,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "provided by name LIMIT 2, 3": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -897,8 +925,8 @@ loadArray: function (t) {
       }).slice(2, 5)
       .map(function (user) {
         return ''+user.id;
-      });      
-      
+      });
+
       UserFindMockup.sort({
         field: 'name',
         limit: [2,3]
@@ -908,10 +936,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "provided by number": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -919,7 +947,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'number'
       }, this.userIds, function (err, ids) {
@@ -928,10 +956,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "provided by number DESC": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         var id_sort = a.id < b.id ? 1 : -1;
         a = a.p('number');
@@ -940,7 +968,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-      
+
       UserFindMockup.sort({
         field: 'number',
         direction: 'DESC'
@@ -950,10 +978,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-    
+
     "provided by number LIMIT 3, 3": function (t) {
       t.expect(2);
-      
+
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -961,8 +989,8 @@ loadArray: function (t) {
       }).slice(3, 6)
       .map(function (user) {
         return ''+user.id;
-      });      
-      
+      });
+
       UserFindMockup.sort({
         field: 'number',
         limit: [3,3]
-- 
1.7.10


From d553c6f674b3b014841ffc319484d8a133bba0d2 Mon Sep 17 00:00:00 2001
From: Michal Kuklis <michal.kuklis@gmail.com>
Date: Tue, 9 Oct 2012 01:59:53 -0400
Subject: [PATCH 3/5] added check for ids.length

---
 lib/retrieve.js |    1 +
 1 file changed, 1 insertion(+)

diff --git a/lib/retrieve.js b/lib/retrieve.js
index dbadf28..070aeff 100644
--- a/lib/retrieve.js
+++ b/lib/retrieve.js
@@ -77,6 +77,7 @@ exports.findAndLoad = function findAndLoad(searches, callback) {
   var self = this;
   this.find(searches, function (err, ids) {
     if (err) callback(err, ids);
+    if (ids.length == 0) callback("not found", ids);
     if (ids.length > 0) {
       async.map(ids, function (id, callback) {
         self.load(id, function (err, props) {
-- 
1.7.10


From cc159154772e29b51550d92094d252a9759760ef Mon Sep 17 00:00:00 2001
From: Michal Kuklis <michal.kuklis@gmail.com>
Date: Wed, 17 Oct 2012 14:27:06 -0400
Subject: [PATCH 4/5] renamed callback to done; fixed whitespaces (hopefully)

---
 lib/nohm.js     |   43 +++++++++++++++++++++----------------------
 lib/retrieve.js |   30 +++++++++++++++---------------
 2 files changed, 36 insertions(+), 37 deletions(-)

diff --git a/lib/nohm.js b/lib/nohm.js
index 108a423..ddfcc08 100644
--- a/lib/nohm.js
+++ b/lib/nohm.js
@@ -54,7 +54,7 @@ Nohm.model = function (name, options, temp) {
   if ( ! name ) {
     this.logError('When creating a new model you have to provide a name!');
   }
-
+  
   var obj = function (id, cb) {
     this.init(options);
     // if this is changed, check if the factory needs to be changed as well!
@@ -63,19 +63,19 @@ Nohm.model = function (name, options, temp) {
     }
   };
   obj.prototype = new Nohm();
-
+  
   obj.prototype.modelName = name;
 
   obj.prototype.idGenerator = options.idGenerator || 'default';
-
+  
   var meta = {
     inDb: false
   };
   meta.properties = options.properties;
   meta.version = _meta_version(meta.properties, obj);
-
+  
   obj.prototype.meta = meta;
-
+  
   // this creates a few functions for short-form like: SomeModel.load(1, function (err, props) { /* `this` is someModelInstance here */ });
   var shortFormFuncs = ['load', 'find', 'findAndLoad', 'save', 'sort', 'subscribe', 'subscribeOnce', 'unsubscribe'];
   shortFormFuncs.forEach(function (val) {
@@ -101,17 +101,17 @@ Nohm.model = function (name, options, temp) {
 
 var _meta_version = function (properties, obj) {
   var hash = crypto.createHash('sha1');
-
+  
   hash.update(JSON.stringify(properties));
   hash.update(JSON.stringify(obj.prototype.modelName));
   hash.update(obj.prototype.idGenerator.toString());
-
+  
   return hash.digest('hex');
 };
 
 /**
  * Factory to produce instances of models
- *
+ * 
  * @param {String} name Name of the model (as given to Nohm.model())
  * @param {Number} [id] Id to be loaded. This requires the callback.
  * @param {Function} [callback] Called when the user is loaded from the db.
@@ -133,7 +133,7 @@ Nohm.factory = function factory(name, id, callback) {
 
 /**
  * Gets all registered models.
- *
+ * 
  * @returns {Object} Object containing all registered models
  * @static
  */
@@ -240,7 +240,7 @@ Nohm.prototype.init = function (options) {
     Nohm.logError('Did not find a viable redis client in Nohm or the model: '+this.modelName);
     return false;
   }
-
+  
   if ( ! this.meta.inDb) {
     __updateMeta.call(this);
   }
@@ -254,7 +254,7 @@ Nohm.prototype.init = function (options) {
 
   // initialize the properties
   if (options.hasOwnProperty('properties')) {
-
+    
     for (var p in options.properties) {
       if (options.properties.hasOwnProperty(p)) {
         this.properties[p] = h.$extend(true, {}, options.properties[p]); // deep copy
@@ -273,7 +273,7 @@ Nohm.prototype.init = function (options) {
       }
     }
   }
-
+  
   if (options.hasOwnProperty('methods')) {
     addMethods.call(this, options.methods);
   }
@@ -296,18 +296,18 @@ var __updateMeta = function () {
     return false;
   }
   var self = this;
-
+  
   var version_key = Nohm.prefix.meta.version + this.modelName;
   var idGenerator_key = Nohm.prefix.meta.idGenerator + this.modelName;
   var properties_key = Nohm.prefix.meta.properties + this.modelName;
-  var properties = traverse(self.meta.properties).map(function (x) {
+  var properties = traverse(self.meta.properties).map(function (x) { 
     if (typeof x === 'function') {
-      return String(x)
+      return String(x) 
     } else {
       return x;
     }
   });
-
+  
   this.getClient().get(version_key, function (err, db_version) {
     if (err) {
       Nohm.logError(err);
@@ -335,11 +335,11 @@ var __updateMeta = function () {
 
 /**
  * DO NOT USE THIS UNLESS YOU ARE ABSOLUTELY SURE ABOUT IT!
- *
+ * 
  * Deletes any keys from the db that start with nohm prefixes.
- *
+ * 
  * DO NOT USE THIS UNLESS YOU ARE ABSOLUTELY SURE ABOUT IT!
- *
+ * 
  * @param {Object} [redis] You can specify the redis client to use. Default: Nohm.client
  * @param {Function} [callback] Called after all keys are deleted.
  */
@@ -357,11 +357,11 @@ Nohm.purgeDb = function (redis, callback) {
     });
   };
   var deletes = [];
-
+  
   Object.keys(Nohm.prefix).forEach(function (key) {
     deletes.push(async.apply(delKeys, Nohm.prefix[key]));
   });
-
+  
   async.series(deletes, function (err) {
     callback(err);
   });
@@ -382,4 +382,3 @@ moduleNames.forEach(function (name) {
 });
 
 exports.Nohm = Nohm;
-
diff --git a/lib/retrieve.js b/lib/retrieve.js
index 070aeff..252e74d 100644
--- a/lib/retrieve.js
+++ b/lib/retrieve.js
@@ -79,9 +79,9 @@ exports.findAndLoad = function findAndLoad(searches, callback) {
     if (err) callback(err, ids);
     if (ids.length == 0) callback("not found", ids);
     if (ids.length > 0) {
-      async.map(ids, function (id, callback) {
+      async.map(ids, function (id, done) {
         self.load(id, function (err, props) {
-          callback(err, this.allProperties());
+          done(err, this);
         });
       }, callback);
     }
@@ -144,8 +144,8 @@ exports.find = function find(searches, callback) {
       callback(err, ids);
     });
   };
-
-
+  
+  
   if (typeof searches === 'function') {
     callback = searches;
     searches = {};
@@ -203,18 +203,18 @@ exports.sort = function (options, ids) {
     ids = false;
   }
   options = typeof(options) !== 'function' && typeof(options) === 'object' && Object.keys(options).length > 0 ? options : {};
-
+  
   if (ids.length > 0 && options === {}) {
     return callback(ids.sort());
   }
-
+  
   if ( ! options.field || ! this.properties.hasOwnProperty(options.field)) {
     callback('invalid field in options', ids);
     return Nohm.logError('Invalid field in sort() options: ' + options.field);
   }
-
+  
   var field_type = this.properties[options.field].type;
-
+  
   var alpha = options.alpha ||  field_type === 'string' ? 'ALPHA' : '';
   var direction = options.direction ? options.direction : 'ASC';
   var scored = Nohm.indexNumberTypes.indexOf(field_type) !== -1;
@@ -235,13 +235,13 @@ exports.sort = function (options, ids) {
   var zset_key = Nohm.prefix.scoredindex+this.modelName+':'+options.field;
   var client = this.getClient();
   var tmp_key;
-
+  
   if (ids) {
     // to get the intersection of the given ids and all ids on the server we first
     // temporarily store the given ids either in a set or sorted set and then return the intersection
-
-    client = client.multi();
-
+    
+    client = client.multi(); 
+    
     if (scored) {
       tmp_key = zset_key+':tmp_sort:'+(+ new Date()) + Math.ceil(Math.random()*1000);
       var tmp_zadd_args = [tmp_key];
@@ -266,14 +266,14 @@ exports.sort = function (options, ids) {
   }
   if (ids) {
     client.del(tmp_key);
-    client.exec(Nohm.logError);
+    client.exec(Nohm.logError);    
   }
 };
 
 var sortNormal = function (client, idset_key, field, alpha, direction, start, stop, callback) {
   var hash_key = Nohm.prefix.hash+this.modelName;
-  client.sort([idset_key,
-    'BY', hash_key+':*->'+field,
+  client.sort([idset_key, 
+    'BY', hash_key+':*->'+field, 
     'LIMIT', start, stop,
     direction,
     alpha],
-- 
1.7.10


From 077c778f07ee975797bd3d8360d0e564f5baa92b Mon Sep 17 00:00:00 2001
From: Michal Kuklis <michal.kuklis@gmail.com>
Date: Sat, 20 Oct 2012 14:25:09 -0400
Subject: [PATCH 5/5] fixed test

---
 test/findTests.js |  112 +++++++++++++++++++++++++++--------------------------
 1 file changed, 57 insertions(+), 55 deletions(-)

diff --git a/test/findTests.js b/test/findTests.js
index 998963f..b24ad49 100644
--- a/test/findTests.js
+++ b/test/findTests.js
@@ -105,7 +105,7 @@ var createUsers = function(props, modelName, callback) {
 };
 
 exports.find = {
-
+  
   setUp: function(next) {
     if (!nohm.client) {
       nohm.setClient(redis);
@@ -205,6 +205,7 @@ exports.find = {
     });
   },
 
+
   findAndLoad: function (t) {
     var user = new UserFindMockup();
 
@@ -225,14 +226,15 @@ exports.find = {
         }
 
         t.equals(users.length, 1, 'The loaded number of users equals 1');
-        t.equals(user.p('name'), users[0].name, 'The loaded version of the name was not the same as a set one.');
-        t.equals(user.p('email'), users[0].email, 'The loaded version of the email was not the same as a set one.');
+        t.equals(user.p('name'), users[0].p('name'), 'The loaded version of the name was not the same as a set one.');
+        t.equals(user.p('email'), users[0].p('email'), 'The loaded version of the email was not the same as a set one.');
         t.equals(user.id, users[0].id, 'The loaded version of the email was not the same as a set one.');
         t.done();
       });
     });
   },
 
+
   findAll: function(t) {
     var self = this;
     var findUser = new UserFindMockup();
@@ -264,7 +266,7 @@ exports.find = {
 loadArray: function (t) {
   var findUser = new UserFindMockup();
   t.expect(2);
-
+  
   findUser.load(all, function (err, users) {
     errLogger(err);
     t.ok(Array.isArray(users), 'load()ing an array of ids did not return an array');
@@ -333,12 +335,12 @@ loadArray: function (t) {
       t.done();
     });
   },
-
+  
   findByIntegerUnique: function(t) {
     var saveObj = nohm.factory('UniqueIntegerFind');
     var findObj = nohm.factory('UniqueIntegerFind');
     t.expect(3);
-
+    
     saveObj.p('unique', 123);
     saveObj.save(function (err) {
       t.ok(!err, 'Unexpected saving error');
@@ -471,7 +473,7 @@ loadArray: function (t) {
   findByMixedIndexMissing: function(t) {
     var findUser = new UserFindMockup();
     t.expect(1);
-
+    
     createUsers([{
       name: 'mixedindextestMissing',
       email: 'mixedindextestMissing@hurgel.de',
@@ -678,11 +680,11 @@ loadArray: function (t) {
       });
     });
   },
-
+  
   "normal string IDs": {
     setUp: function (next) {
       var self = this;
-      createUsers([{
+      createUsers([{ 
       }, {
         name: 'blablub'
       }], 'UserFindNoIncrementMockup', function (users, ids) {
@@ -694,11 +696,11 @@ loadArray: function (t) {
     tearDown: function (next) {
       h.cleanUp(redis, args.prefix, next);
     },
-
+    
     find: function (t) {
       t.expect(2);
       var self = this;
-
+      
       UserFindNoIncrementMockup.find({
         name: 'blablub'
       }, function (err, ids) {
@@ -707,11 +709,11 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+  
     "load via constructor": function (t) {
       t.expect(2);
       var self = this;
-
+      
       var test = new UserFindNoIncrementMockup(this.userIds[0], function (err) {
         t.ok(!err, 'There was an error while loading a model via constructor.');
         t.same(test.allProperties(), self.users[0].allProperties(), 'A loaded user did not match what should\'ve been saved.');
@@ -719,7 +721,7 @@ loadArray: function (t) {
       });
     }
   },
-
+  
   "search unique that doesn't exists": function (t) {
     t.expect(2);
     var test = nohm.factory('UserFindMockup');
@@ -731,13 +733,13 @@ loadArray: function (t) {
       t.done();
     })
   },
-
+  
   "load via constructor": function (t) {
     t.expect(3);
     var test = nohm.factory('UserFindMockup');
     test.save(function (err) {
       t.ok(!err, 'There was an error while saving.');
-
+      
       var test2 = new UserFindMockup(test.id, function (err) {
         t.ok(!err, 'There was an error while loading a model via constructor.');
         t.same(test2.allProperties(), test.allProperties(), 'The return of a search that didn\'t find anything was wrong.');
@@ -745,12 +747,12 @@ loadArray: function (t) {
       });
     })
   },
-
+  
   sort: {
-
+    
     "all by name": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -758,7 +760,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'name'
       }, function (err, ids) {
@@ -767,10 +769,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "all by name DESC": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -778,7 +780,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'name',
         direction: 'DESC'
@@ -788,10 +790,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "all by name LIMIT 2, 3": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -799,8 +801,8 @@ loadArray: function (t) {
       }).slice(2, 5)
       .map(function (user) {
         return ''+user.id;
-      });
-
+      });      
+      
       UserFindMockup.sort({
         field: 'name',
         limit: [2,3]
@@ -810,10 +812,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "all by number": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -821,7 +823,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'number'
       }, function (err, ids) {
@@ -830,10 +832,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "all by number DESC": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         var id_sort = a.id < b.id ? 1 : -1;
         a = a.p('number');
@@ -842,7 +844,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'number',
         direction: 'DESC'
@@ -852,10 +854,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "all by number LIMIT 3, 3": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -864,7 +866,7 @@ loadArray: function (t) {
       .map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'number',
         limit: [3,3]
@@ -876,7 +878,7 @@ loadArray: function (t) {
     },
     "provided by name": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -884,7 +886,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'name'
       }, this.userIds, function (err, ids) {
@@ -893,10 +895,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "provided by name DESC": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -904,7 +906,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'name',
         direction: 'DESC'
@@ -914,10 +916,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "provided by name LIMIT 2, 3": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('name');
         b = b.p('name');
@@ -925,8 +927,8 @@ loadArray: function (t) {
       }).slice(2, 5)
       .map(function (user) {
         return ''+user.id;
-      });
-
+      });      
+      
       UserFindMockup.sort({
         field: 'name',
         limit: [2,3]
@@ -936,10 +938,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "provided by number": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -947,7 +949,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'number'
       }, this.userIds, function (err, ids) {
@@ -956,10 +958,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "provided by number DESC": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         var id_sort = a.id < b.id ? 1 : -1;
         a = a.p('number');
@@ -968,7 +970,7 @@ loadArray: function (t) {
       }).map(function (user) {
         return ''+user.id;
       });
-
+      
       UserFindMockup.sort({
         field: 'number',
         direction: 'DESC'
@@ -978,10 +980,10 @@ loadArray: function (t) {
         t.done();
       });
     },
-
+    
     "provided by number LIMIT 3, 3": function (t) {
       t.expect(2);
-
+      
       var sorted_ids = this.users.sort(function (a, b) {
         a = a.p('number');
         b = b.p('number');
@@ -989,8 +991,8 @@ loadArray: function (t) {
       }).slice(3, 6)
       .map(function (user) {
         return ''+user.id;
-      });
-
+      });      
+      
       UserFindMockup.sort({
         field: 'number',
         limit: [3,3]
-- 
1.7.10

